{"version":3,"sources":["assets/Script/AudioMgr.ts","assets/Script/gamePlay/block/BaseBlock.ts","assets/Script/gamePlay/effects/BaseEffect.ts","assets/Script/gamePlay/block/BlockMgr.ts","assets/Script/gamePlay/block/BlockStyleProperty.ts","assets/Script/gamePlay/effects/EffectMgr.ts","assets/Script/gamePlay/common/EliminateUtils.ts","assets/Script/gamePlay/GameConst.ts","assets/Script/gamePlay/ui/GameFinPanel.ts","assets/Script/gamePlay/common/GameFsm.ts","assets/Script/gamePlay/GameMgr.ts","assets/Script/GameSetting.ts","assets/Script/gamePlay/GameTypes.ts","assets/Script/gamePlay/ui/GameUI.ts","assets/Script/gamePlay/common/GameUtils.ts","assets/Script/gamePlay/common/Grid.ts","assets/Script/HotUpdateMgr.ts","assets/Script/HotUpdatePanel.ts","assets/Script/level/LevelBtn.ts","assets/Script/level/LevelMenu.ts","assets/Script/level/LevelView.ts","assets/Script/Menu.ts","assets/Script/gamePlay/PlayPanel.ts","assets/Script/gamePlay/common/SpineProperty.ts","assets/Script/gamePlay/common/SpineUtils.ts","assets/Script/gamePlay/TouchHandler.ts","assets/Script/Utils.ts","assets/Script/const.ts"],"names":["ccclass","property","cc","_decorator","AudioMgr","Component","[object Object]","this","bgm","clickAudio","swapAudio","audioEngine","playMusic","stopMusic","pauseMusic","resumeMusic","audioClip","playEffect","_playEffect","__decorate","AudioClip","prototype","exports","default","BaseBlock","skeleton","_config","_style","setToSetupPose","clearTracks","config","style","parent","targetStyle","getAnimationInfo","special","skeletonData","node","setParent","setAnimation","animation","isLoop","sp","Skeleton","requireComponent","BaseEffect","initPos","cd","setPosition","setEndListener","BlockStyleProperty_1","require","BaseBlock_1","BlockMgr","blockPrefab","blockStyleArr","_blockLoop","blockType","find","blockConfig","blockStyle","getBlockStyle","type","block","getBlockLoop","get","newBlock","instantiate","blockComp","getComponent","reuse","put","NodePool","clear","Prefab","GameTypes_1","SpineProperty_1","BlockStyleProperty","BlockType","BLOCK_TYPE_1","normalAnimationClip","rowAnimationClip","columnAnimationClip","bombAnimationClip","specialAnimationClip","blockSpecialType","BlockSpecialType","ROW","COLUMN","BOOM","SPECIAL_BOOM","Enum","BaseEffect_1","EffectMgr","effectRootNode","effectPrefab","normalEffect","rowEffect","columnEffect","rowEffectAudio","columnEffectAudio","bombEffectAudio","specialBombEffectAudio","effectAudio","comboAudioList","commentAudioList","_effectLoop","grid","gameCheckInfo","canEliminateCheckInfos","effectInfoList","eliminateCheckInfo","eliminateBlockType","entryLocation","contiguousLocations","NONE","getSpineProperty","push","location","step","effectCount","length","endCallBack","effectInfo","pos","getCellPosition","getEffect","effect","putEffect","newEffect","effectComp","effectNode","position","combo","_playEffectAudio","totalCombo","commentList","commentIndex","findIndex","comment","Node","displayName","GameUtils_1","Grid_1","getEliminateType","entry","eliminateBlockInfos","rowCount","reduce","acc","info","row","columnCount","column","EliminateType","BASE_5","IRREGULAR_5","BASE_4_ROW","BASE_4_COLUMN","BASE_3","generateSpecialBlock","eliminateType","baseBlockConfig","specialBlockGenerator","gameMapInfo","concat","newSpecailBlock","stringifyLocation","newSpecailBlocks","releaseSpecialBlock","alreadyEliminateBlocks","specialBlockConfig","filter","extraEliminateLocations","specialBlockInfo","shift","targetRow","colCount","effectedLocations","Array","fill","map","_","index","some","l","isLocationEqual","targetColumn","centerLocation","effectLocations","isInRange","rowOffsetList","columnOffsetList","offsetList","v2","offset","x","y","entryBlockConfig","targetType","rowBlocks","col","extraEliminateBlockInfos","blockInfo","TOUCH_BLOCK_EVENT","Direction","DirectionVector","UP","Vec2","DOWN","LEFT","RIGHT","NewClass","label","text","Label","GameState","GameFsm","initialState","READY","_stateChangeCallbacks","_currentState","_stateTransitions","Map","_initStateTransitions","set","PLAYING","CHECKING","GAME_OVER","GAME_WIN","ELIMINATING","DROPPING","currentState","toState","allowedStates","includes","newState","force","console","warn","canTransitionTo","oldState","log","_notifyStateChange","callback","indexOf","splice","fromState","forEach","error","state","PlayPanel_1","GameConst_1","TouchHandler_1","EliminateUtils_1","GameUI_1","EffectMgr_1","AudioMgr_1","BlockMgr_1","GameFsm_1","Utils_1","const_1","GameMgr","playPanel","gameUI","touchHandler","blockMgr","effectMgr","audioMgr","_selectedLocation","_gameFsm","_gameCheckInfo","onStateChange","bind","on","onTouchEvent","levelConfig","initGamePanel","initGameUI","stepLimit","changeState","onReady","onPlaying","onChecking","onEliminating","onDropping","onGameOver","onGameWin","event","canPlayerOperate","haveStepCount","TouchDetailEventType","click","onClickBlock","drag","onDragBlock","direction","isSameBlock","isNeighbor","isNeighborLocation","swapBlocks","swapLocation","getSwapLocation","isInBounds","location1","location2","generatetBaseGameCheckInfo","checkBlockEntry","tempConfig","playSwapAudio","setEnabled","excludeLocations","getContiguousBlocks","blockConfig1","blockConfig2","decrementStepCount","swapAndBackBlocks","checkGameOver","score","blockCount","EliminateScore","EliminateBlockScore","Base4RowScore","Base4ColumnScore","Irregular5Score","Base5Score","chainCount","incrementScore","playComboAudio","eliminateBlocks","generateNewSpecialBlocks","dropRandomBlocks","entryList","baseGameCheckInfo","showGameOverPanel","showGameWinPanel","saveData","getLocalData","UserSaveDataName","maxLevelId","getLevelConfig","id","setLocalData","curScore","getScore","targetScore","playCommentAudio","director","loadScene","getBlockMapInfo","canEliminateBlocks","eliminateScore","stopAllEffects","GameSetting","bgmVolumeCrl","effectVolumeCrl","bgmVolume","effectVolume","UserSettingItemName","progress","bindEvents","onBgmVolumeChange","onEffectVolumeChange","slider","setMusicVolume","setEffectsVolume","Slider","GameUI","scoreLabel","stepCountLabel","gameOverPanel","gameWinPanel","_score","_stepCount","stepCount","string","toString","active","DirectionList","getDirection","delta","minAngle","Infinity","minDirection","dirVec","angle","normalize","getNeighborLocations","Math","abs","directionVector","getRandomBlockConfig","blockConfigs","BLOCK_TYPE_2","BLOCK_TYPE_3","BLOCK_TYPE_4","BLOCK_TYPE_5","floor","random","parseLocation","split","Number","Grid","width","height","cellSize","cellSpacing","data","neighborLocations","neighbors","neighborLocation","getCell","totalWidth","totalHeight","Size","HotUpdatePanel_1","versionCompareHandle","versionA","versionB","vA","vB","i","a","parseInt","b","HotUpdateMgr","manifestUrl","hotUpdatePanel","_am","_storagePath","_updating","_canRetry","_failCount","sys","isNative","jsb","fileUtils","getWritablePath","AssetsManager","setVerifyCallback","path","asset","compressed","expectedMD5","md5","relativePath","setInfo","os","OS_ANDROID","setMaxConcurrentTask","setFileProgress","setByteProgress","getEventCode","EventAssetsManager","ERROR_NO_LOCAL_MANIFEST","ERROR_DOWNLOAD_MANIFEST","ERROR_PARSE_MANIFEST","ALREADY_UP_TO_DATE","NEW_VERSION_FOUND","getTotalBytes","setCheckBtnActive","setEventCallback","getState","State","UNINITED","url","nativeUrl","loader","md5Pipe","transformURL","loadLocalManifest","getLocalManifest","isLoaded","checkCb","checkUpdate","needRestart","failed","UPDATE_PROGRESSION","getPercent","getPercentByFile","setFileLabel","getDownloadedFiles","getTotalFiles","setByteLabel","getDownloadedBytes","msg","getMessage","UPDATE_FINISHED","UPDATE_FAILED","setRetryBtnActive","ERROR_UPDATING","getAssetId","ERROR_DECOMPRESS","searchPaths","getSearchPaths","newPaths","unshift","apply","localStorage","setItem","JSON","stringify","setSearchPaths","stopAll","game","restart","updateCb","update","setUpdateBtnActive","downloadFailedAssets","Asset","HotUpdatePanel","infoLabel","fileLabel","byteLabel","checkBtn","updateBtn","retryBtn","_fileProgress","_byteProgress","LevelBtn","levelInfo","json","btn","Button","interactable","JsonAsset","GameMgr_1","LevelBtn_1","LevelSelect","target","levelBtn","getLevelInfo","runGame","onLaunched","err","scene","gameMgr","getComponentInChildren","LevelView","EntryLevelEvent","onEntryLevel","hasSaveData","HasLocalData","adjustLevelBtns","levelBtns","getAllLevelBtns","userLevelInfo","setBtnActive","getComponentsInChildren","off","GameSetting_1","Menu","gameSetting","hasSettingData","PlayPanel","gridRootNode","cellWidth","cellHeight","_grid","_blockMgr","_effectMgr","_levelConfig","_blockParentMap","initGrid","initBlocks","gameMap","setContentSize","getGridSize","blockInfos","blocks","keys","Object","key","generateBlock","blockParent","addChild","getTouchedLocation","getBlockByLocation","mapInfo","excludeLocation","queue","typeIsSame","config1","config2","hasContiguous","hasExclude","inQueue","currentLocation","neighborsLocations","getNeighborsLocations","rowList","columnList","rowSet","Set","columnSet","validContiguousLocations","rowLocations","sort","linkedValidRowLocations","columnLocations","linkedValidColumnLocations","block1","block2","eliminateHandler","putBlock","effectHandler","setCell","pos1","pos2","actionCd","nodeActionSeq1","sequence","moveTo","callFunc","nodeActionSeq2","runAction","tween","start","emptyList","getData","rowData","cell","blockDropInfos","columnKey","startDropRow","targetLocation","dropTime","targetDropLocation","startGenerateRow","randomBlockConfig","blockDropInfo","targetPos","isEmpty","getBlockParent","getBlock","getConfig","blockList","min","SpineProperty","SkeletonData","DefaultAnimationsEnum","<None>","setEnumAttr","obj","propName","enumDef","refreshEditor","enumArray","updateAnimationEnum","spineComp","context","TouchHandler","_isEnabled","_isDragging","_hasEmitEvent","_startPos","initTouchEvents","EventType","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","e","convertToNodeSpaceAR","getLocation","sub","getLocationByPosition","emit","threshold","absDelta","mag","enabled","name","str","getItem","parse"],"mappings":"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","sourcesContent":["// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class AudioMgr extends cc.Component {\r\n    @property(cc.AudioClip)\r\n    bgm: cc.AudioClip = null;\r\n\r\n    @property(cc.AudioClip)\r\n    clickAudio: cc.AudioClip = null;\r\n\r\n    @property(cc.AudioClip)\r\n    swapAudio: cc.AudioClip = null;\r\n\r\n    playMusic(): void {\r\n        // 播放背景音乐\r\n        cc.audioEngine.playMusic(this.bgm, true);\r\n    }\r\n\r\n    stopMusic(): void {\r\n        // 停止背景音乐\r\n        cc.audioEngine.stopMusic();\r\n    }\r\n\r\n    pauseMusic(): void {\r\n        // 暂停背景音乐\r\n        cc.audioEngine.pauseMusic();\r\n    }\r\n\r\n    resumeMusic(): void {\r\n        // 恢复背景音乐\r\n        cc.audioEngine.resumeMusic();\r\n    }\r\n\r\n    _playEffect(audioClip: cc.AudioClip): void {\r\n        // 播放音效\r\n        cc.audioEngine.playEffect(audioClip, false);\r\n    }\r\n\r\n    playClickAudio(): void {\r\n        // 播放点击音效\r\n        this._playEffect(this.clickAudio);\r\n    }\r\n\r\n    playSwapAudio(): void {\r\n        this._playEffect(this.swapAudio);\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport SpineProperty from '../common/SpineProperty';\r\nimport { BlockConfig } from '../GameTypes';\r\nimport BlockStyleProperty from './BlockStyleProperty';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BaseBlock extends cc.Component {\r\n    @property(sp.Skeleton)\r\n    skeleton: sp.Skeleton = null;\r\n\r\n    _config: BlockConfig = null;\r\n    _style: BlockStyleProperty = null;\r\n\r\n    public getConfig(): BlockConfig {\r\n        return this._config;\r\n    }\r\n\r\n    public getStyle(): BlockStyleProperty {\r\n        return this._style;\r\n    }\r\n\r\n    // 节点池回收\r\n    public unuse(): void {\r\n        this.skeleton.setToSetupPose();\r\n        this.skeleton.clearTracks();\r\n        this._config = null;\r\n        this._style = null;\r\n    }\r\n\r\n    // 节点池获取\r\n    public reuse(\r\n        config: BlockConfig,\r\n        style: BlockStyleProperty,\r\n        parent?: cc.Node\r\n    ): void {\r\n        this._config = config;\r\n        this._style = style;\r\n        const targetStyle = this._style.getAnimationInfo(this._config.special);\r\n        this.skeleton.skeletonData = targetStyle.skeletonData;\r\n        if (parent) {\r\n            this.node.setParent(parent);\r\n        }\r\n        this.skeleton.setAnimation(\r\n            0,\r\n            targetStyle.animation,\r\n            targetStyle.isLoop\r\n        );\r\n    }\r\n}\r\n","import SpineProperty from '../common/SpineProperty';\r\n\r\nconst { ccclass, property, requireComponent } = cc._decorator;\r\n\r\n@ccclass\r\n@requireComponent(sp.Skeleton)\r\nexport default class BaseEffect extends cc.Component {\r\n    @property(sp.Skeleton)\r\n    skeleton: sp.Skeleton = null;\r\n\r\n    public reuse(\r\n        style: SpineProperty,\r\n        initPos: cc.Vec2,\r\n        parent: cc.Node,\r\n        cd: () => void\r\n    ): void {\r\n        this.node.setPosition(initPos);\r\n        this.node.setParent(parent);\r\n        this.skeleton.skeletonData = style.skeletonData;\r\n        this.skeleton.setAnimation(0, style.animation, style.isLoop);\r\n        this.skeleton.setEndListener(() => {\r\n            cd();\r\n        });\r\n    }\r\n\r\n    public unuse(): void {\r\n        // this.skeleton.clearTracks();\r\n        this.skeleton.skeletonData = null;\r\n    }\r\n}\r\n","import { BlockConfig, BlockType } from '../GameTypes';\r\nimport BlockStyleProperty from './BlockStyleProperty';\r\nimport BaseBlock from './BaseBlock';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BlockMgr extends cc.Component {\r\n    @property(cc.Prefab)\r\n    blockPrefab: cc.Prefab = null;\r\n\r\n    @property({\r\n        type: [BlockStyleProperty],\r\n    })\r\n    blockStyleArr: BlockStyleProperty[] = [];\r\n\r\n    _blockLoop: cc.NodePool = null;\r\n\r\n    /**\r\n     * 根据方块类型获取方块样式\r\n     * @param blockType 方块类型\r\n     * @returns 方块样式\r\n     */\r\n    public getBlockStyle(blockType: BlockType): BlockStyleProperty {\r\n        return this.blockStyleArr.find(\r\n            (style) => style.blockType === blockType\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 根据方块配置获取方块\r\n     * @param blockConfig 方块配置\r\n     * @returns 方块\r\n     */\r\n    public getBlock(blockConfig: BlockConfig, parent?: cc.Node): BaseBlock {\r\n        const blockStyle = this.getBlockStyle(blockConfig.type);\r\n        if (!blockStyle) {\r\n            return null;\r\n        }\r\n        const block = this.getBlockLoop().get(blockConfig, blockStyle, parent);\r\n        if (!block) {\r\n            const newBlock = cc.instantiate(this.blockPrefab);\r\n            const blockComp = newBlock.getComponent(BaseBlock);\r\n            blockComp.reuse(blockConfig, blockStyle, parent);\r\n            return blockComp;\r\n        }\r\n        return block.getComponent(BaseBlock);\r\n    }\r\n\r\n    /**\r\n     * 回收方块\r\n     * @param block 方块\r\n     */\r\n    public putBlock(block: BaseBlock): void {\r\n        this._blockLoop.put(block.node);\r\n    }\r\n\r\n    public getBlockLoop(): cc.NodePool {\r\n        if (!this._blockLoop) {\r\n            this._blockLoop = new cc.NodePool(BaseBlock);\r\n        }\r\n        return this._blockLoop;\r\n    }\r\n\r\n    /**\r\n     * 销毁\r\n     */\r\n    protected onDestroy(): void {\r\n        this._blockLoop && this._blockLoop.clear();\r\n        this._blockLoop = null;\r\n    }\r\n}\r\n","import { BlockSpecialType, BlockType } from '../GameTypes';\r\nimport SpineProperty from '../common/SpineProperty';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BlockStyleProperty extends cc.Component {\r\n    @property({\r\n        type: cc.Enum(BlockType),\r\n    })\r\n    blockType: BlockType = BlockType.BLOCK_TYPE_1;\r\n\r\n    @property(SpineProperty)\r\n    normalAnimationClip: SpineProperty = null;\r\n\r\n    @property(SpineProperty)\r\n    rowAnimationClip: SpineProperty = null;\r\n\r\n    @property(SpineProperty)\r\n    columnAnimationClip: SpineProperty = null;\r\n\r\n    @property(SpineProperty)\r\n    bombAnimationClip: SpineProperty = null;\r\n\r\n    @property(SpineProperty)\r\n    specialAnimationClip: SpineProperty = null;\r\n\r\n    public getAnimationInfo(blockSpecialType: BlockSpecialType): SpineProperty {\r\n        switch (blockSpecialType) {\r\n            case BlockSpecialType.ROW:\r\n                return this.rowAnimationClip;\r\n            case BlockSpecialType.COLUMN:\r\n                return this.columnAnimationClip;\r\n            case BlockSpecialType.BOOM:\r\n                return this.bombAnimationClip;\r\n            case BlockSpecialType.SPECIAL_BOOM:\r\n                return this.specialAnimationClip;\r\n            default:\r\n                return this.normalAnimationClip;\r\n        }\r\n    }\r\n}\r\n","import BaseEffect from './BaseEffect';\r\nimport SpineProperty from '../common/SpineProperty';\r\nimport { BlockSpecialType, GameCheckInfo, Location } from '../GameTypes';\r\nimport Grid from '../common/Grid';\r\nimport BaseBlock from '../block/BaseBlock';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\ninterface EffectInfo {\r\n    location: Location;\r\n    style: SpineProperty;\r\n}\r\n\r\n@ccclass\r\nexport default class EffectMgr extends cc.Component {\r\n    @property(cc.Node)\r\n    effectRootNode: cc.Node = null;\r\n\r\n    @property(cc.Prefab)\r\n    effectPrefab: cc.Prefab = null;\r\n\r\n    @property({\r\n        displayName: '普通特效',\r\n        type: SpineProperty,\r\n    })\r\n    normalEffect: SpineProperty = null;\r\n\r\n    @property({\r\n        displayName: '行特效',\r\n        type: SpineProperty,\r\n    })\r\n    rowEffect: SpineProperty = null;\r\n\r\n    @property({\r\n        displayName: '列特效',\r\n        type: SpineProperty,\r\n    })\r\n    columnEffect: SpineProperty = null;\r\n\r\n    @property(cc.AudioClip)\r\n    rowEffectAudio: cc.AudioClip = null;\r\n\r\n    @property(cc.AudioClip)\r\n    columnEffectAudio: cc.AudioClip = null;\r\n\r\n    @property(cc.AudioClip)\r\n    bombEffectAudio: cc.AudioClip = null;\r\n\r\n    @property(cc.AudioClip)\r\n    specialBombEffectAudio: cc.AudioClip = null;\r\n\r\n    @property(cc.AudioClip)\r\n    effectAudio: cc.AudioClip = null;\r\n\r\n    @property([cc.AudioClip])\r\n    comboAudioList: Array<cc.AudioClip> = [];\r\n\r\n    @property([cc.AudioClip])\r\n    commentAudioList: Array<cc.AudioClip> = [];\r\n\r\n    // @property({\r\n    //     displayName: '炸弹特效',\r\n    //     type: SpineProperty,\r\n    // })\r\n    // bombEffect: SpineProperty = null;\r\n\r\n    // @property({\r\n    //     displayName: '特殊炸弹特效',\r\n    //     type: SpineProperty,\r\n    // })\r\n    // specialBombEffect: SpineProperty = null;\r\n\r\n    _effectLoop: cc.NodePool = null;\r\n\r\n    public onLoad(): void {\r\n        this._effectLoop = new cc.NodePool(BaseEffect);\r\n    }\r\n\r\n    public effectHandler(\r\n        grid: Grid<BaseBlock>,\r\n        gameCheckInfo: GameCheckInfo,\r\n        cd: () => void\r\n    ): void {\r\n        const { canEliminateCheckInfos } = gameCheckInfo;\r\n        const effectInfoList: Array<EffectInfo> = [];\r\n        for (const eliminateCheckInfo of canEliminateCheckInfos) {\r\n            const { eliminateBlockType, entryLocation, contiguousLocations } =\r\n                eliminateCheckInfo;\r\n            // 如果是特殊方块，则添加特效\r\n            if (eliminateBlockType !== BlockSpecialType.NONE) {\r\n                const style = this.getSpineProperty(eliminateBlockType);\r\n                style &&\r\n                    effectInfoList.push({\r\n                        location: entryLocation,\r\n                        style,\r\n                    });\r\n            }\r\n            // 给普通方块，添加特效\r\n            for (const location of contiguousLocations) {\r\n                effectInfoList.push({\r\n                    location,\r\n                    style: this.normalEffect,\r\n                });\r\n            }\r\n        }\r\n\r\n        // 特效释放回调\r\n        let step = 0;\r\n        const effectCount = effectInfoList.length;\r\n        const endCallBack = () => {\r\n            step++;\r\n            if (step === effectCount) {\r\n                cd && cd();\r\n            }\r\n        };\r\n\r\n        // 释放特效\r\n        for (const effectInfo of effectInfoList) {\r\n            const { location, style } = effectInfo;\r\n            const pos = grid.getCellPosition(location);\r\n            this.getEffect(style, pos, endCallBack);\r\n        }\r\n    }\r\n\r\n    public getSpineProperty(special: BlockSpecialType): SpineProperty {\r\n        switch (special) {\r\n            case BlockSpecialType.NONE:\r\n                return this.normalEffect;\r\n            case BlockSpecialType.ROW:\r\n                return this.rowEffect;\r\n            case BlockSpecialType.COLUMN:\r\n                return this.columnEffect;\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    public getEffect(\r\n        style: SpineProperty,\r\n        initPos: cc.Vec2,\r\n        cd: () => void\r\n    ): BaseEffect {\r\n        let effect = this._effectLoop.get(\r\n            style,\r\n            initPos,\r\n            this.effectRootNode,\r\n            () => {\r\n                this.putEffect(effect);\r\n                cd && cd();\r\n            }\r\n        );\r\n        if (!effect) {\r\n            const newEffect = cc.instantiate(this.effectPrefab);\r\n            const effectComp = newEffect.getComponent(BaseEffect);\r\n            effectComp.reuse(style, initPos, this.effectRootNode, () => {\r\n                this.putEffect(newEffect);\r\n                cd && cd();\r\n            });\r\n            effect = newEffect;\r\n        }\r\n        return effect.getComponent(BaseEffect);\r\n    }\r\n\r\n    public putEffect(effectNode: cc.Node): void {\r\n        this._effectLoop.put(effectNode);\r\n    }\r\n\r\n    public setRootPosition(position: cc.Vec2): void {\r\n        this.effectRootNode.setPosition(position);\r\n    }\r\n\r\n    public playComboAudio(combo: number): void {\r\n        const audioClip = this.comboAudioList[combo - 1];\r\n        audioClip && this._playEffectAudio(audioClip);\r\n    }\r\n\r\n    public playCommentAudio(totalCombo: number): void {\r\n        const commentList = [11, 9, 7, 5, 3];\r\n        // 找到小于等于totalCombo的最大的commentIndex\r\n        const commentIndex = commentList.findIndex(\r\n            (comment) => totalCombo >= comment\r\n        );\r\n        if (commentIndex === -1) {\r\n            return;\r\n        }\r\n        const audioClip = this.commentAudioList[commentIndex];\r\n        audioClip && this._playEffectAudio(audioClip);\r\n    }\r\n\r\n    _playEffectAudio(audioClip: cc.AudioClip): void {\r\n        audioClip && cc.audioEngine.playEffect(audioClip, false);\r\n    }\r\n}\r\n","import {\r\n    EliminateBlockInfo,\r\n    EliminateType,\r\n    Location,\r\n    BlockConfig,\r\n    BlockSpecialType,\r\n    EliminateCheckInfo,\r\n    GameCheckInfo,\r\n} from '../GameTypes';\r\nimport { isLocationEqual } from './GameUtils';\r\nimport { stringifyLocation } from './Grid';\r\n\r\n/**\r\n * 获取消除类型\r\n * @param entry 检查方块入口\r\n * @param eliminateBlockInfos 消除方块信息\r\n * @returns 消除类型\r\n */\r\nexport function getEliminateType(\r\n    entry: Location,\r\n    eliminateBlockInfos: Array<EliminateBlockInfo>\r\n): EliminateType {\r\n    const rowCount = eliminateBlockInfos.reduce((acc, info) => {\r\n        return acc + (info.location.row === entry.row ? 1 : 0);\r\n    }, 0);\r\n    const columnCount = eliminateBlockInfos.reduce((acc, info) => {\r\n        return acc + (info.location.column === entry.column ? 1 : 0);\r\n    }, 0);\r\n\r\n    // 彩色炸弹\r\n    if (rowCount >= 5) {\r\n        // Base_5\r\n        return EliminateType.BASE_5;\r\n    } else if (columnCount >= 5) {\r\n        // Base_5\r\n        return EliminateType.BASE_5;\r\n    }\r\n\r\n    // 基础4连消\r\n    if (rowCount === 4) {\r\n        if (columnCount >= 3) {\r\n            // IRREGULAR_5\r\n            return EliminateType.IRREGULAR_5;\r\n        } else {\r\n            // Base_4\r\n            return EliminateType.BASE_4_ROW;\r\n        }\r\n    } else if (columnCount === 4) {\r\n        if (rowCount >= 3) {\r\n            // IRREGULAR_5\r\n            return EliminateType.IRREGULAR_5;\r\n        } else {\r\n            // Base_4\r\n            return EliminateType.BASE_4_COLUMN;\r\n        }\r\n    }\r\n\r\n    // 基础3连消\r\n    if (rowCount === 3) {\r\n        if (columnCount >= 3) {\r\n            // IRREGULAR_5\r\n            return EliminateType.IRREGULAR_5;\r\n        } else {\r\n            // Base_3\r\n            return EliminateType.BASE_3;\r\n        }\r\n    } else if (columnCount === 3) {\r\n        if (rowCount >= 3) {\r\n            // IRREGULAR_5\r\n            return EliminateType.IRREGULAR_5;\r\n        } else {\r\n            // Base_3\r\n            return EliminateType.BASE_3;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 生成特殊方块\r\n * @param blockConfig 方块配置\r\n * @param eliminateType 消除类型\r\n * @returns 特殊方块配置\r\n */\r\nexport function generateSpecialBlock(\r\n    blockConfig: BlockConfig,\r\n    eliminateType: EliminateType\r\n): BlockConfig {\r\n    // 基础3连消不生成特殊方块\r\n    if (eliminateType === EliminateType.BASE_3) return null;\r\n\r\n    const baseBlockConfig = {\r\n        type: blockConfig.type,\r\n        special: BlockSpecialType.NONE,\r\n    };\r\n    switch (eliminateType) {\r\n        case EliminateType.BASE_4_ROW:\r\n            baseBlockConfig.special = BlockSpecialType.ROW;\r\n            break;\r\n        case EliminateType.BASE_4_COLUMN:\r\n            baseBlockConfig.special = BlockSpecialType.COLUMN;\r\n            break;\r\n        case EliminateType.BASE_5:\r\n            baseBlockConfig.special = BlockSpecialType.SPECIAL_BOOM;\r\n            break;\r\n        case EliminateType.IRREGULAR_5:\r\n            baseBlockConfig.special = BlockSpecialType.BOOM;\r\n            break;\r\n        default:\r\n            return null;\r\n    }\r\n    return baseBlockConfig;\r\n}\r\n\r\n/**\r\n * 特殊方块生成器,生成特殊方块信息,并保存到游戏检查信息中\r\n * @param eliminateCheckInfo 消除检查信息\r\n * @param gameCheckInfo 游戏检查信息\r\n */\r\nexport function specialBlockGenerator(\r\n    eliminateCheckInfo: EliminateCheckInfo,\r\n    gameCheckInfo: GameCheckInfo\r\n): void {\r\n    // 如果是特殊消除类型,则不生成特殊方块\r\n    if (eliminateCheckInfo.eliminateBlockType !== BlockSpecialType.NONE) return;\r\n    const eliminateBlockInfos: Array<EliminateBlockInfo> =\r\n        eliminateCheckInfo.contiguousLocations.reduce((acc, location) => {\r\n            const blockConfig =\r\n                gameCheckInfo.gameMapInfo[location.row][location.column];\r\n            return acc.concat({\r\n                location,\r\n                blockConfig,\r\n            });\r\n        }, [] as Array<EliminateBlockInfo>);\r\n\r\n    //入口方块位置\r\n    const entryLocation = eliminateCheckInfo.entryLocation;\r\n    // 获取消除类型\r\n    const eliminateType = getEliminateType(entryLocation, eliminateBlockInfos);\r\n    // 生成特殊方块\r\n    if (eliminateType === EliminateType.BASE_3) return;\r\n    const blockConfig =\r\n        gameCheckInfo.gameMapInfo[entryLocation.row][entryLocation.column];\r\n    // 生成特殊方块\r\n    const newSpecailBlock = generateSpecialBlock(blockConfig, eliminateType);\r\n    if (newSpecailBlock) {\r\n        // 保存特殊方块信息\r\n        const location = stringifyLocation(\r\n            entryLocation.row,\r\n            entryLocation.column\r\n        );\r\n        gameCheckInfo.newSpecailBlocks[location] = newSpecailBlock;\r\n    }\r\n}\r\n\r\n/**\r\n * 释放特殊方块，根据消除的类型，释放其他方块\r\n * @param specialBlockConfig 特殊方块配置\r\n * @param gameCheckInfo 游戏检查信息\r\n */\r\nexport function releaseSpecialBlock(\r\n    eliminateCheckInfo: EliminateCheckInfo,\r\n    alreadyEliminateBlocks: Array<Location>,\r\n    gameCheckInfo: GameCheckInfo\r\n): void {\r\n    // 获取消除方块信息\r\n    const eliminateBlockInfos: Array<EliminateBlockInfo> =\r\n        eliminateCheckInfo.contiguousLocations.reduce((acc, location) => {\r\n            const blockConfig =\r\n                gameCheckInfo.gameMapInfo[location.row][location.column];\r\n            return acc.concat({\r\n                location,\r\n                blockConfig,\r\n            });\r\n        }, [] as Array<EliminateBlockInfo>);\r\n\r\n    // 释放特性\r\n    const specialBlockConfig = eliminateBlockInfos.filter(\r\n        (info) => info.blockConfig.special !== BlockSpecialType.NONE\r\n    );\r\n    const entryLocation = eliminateCheckInfo.entryLocation;\r\n    // 遍历特殊方块\r\n    while (specialBlockConfig.length > 0) {\r\n        let extraEliminateLocations: Array<Location> = [];\r\n\r\n        const specialBlockInfo = specialBlockConfig.shift();\r\n        if (specialBlockInfo.blockConfig.special === BlockSpecialType.ROW) {\r\n            // 行消除\r\n            const targetRow = specialBlockInfo.location.row;\r\n            const colCount = gameCheckInfo.gameMapInfo[targetRow].length;\r\n            // 受影响的方块位置\r\n            const effectedLocations: Location[] = new Array(colCount)\r\n                .fill(null)\r\n                .map((_, index) => ({\r\n                    row: targetRow,\r\n                    column: index,\r\n                }));\r\n            // 需要额外消除的方块位置\r\n            extraEliminateLocations = effectedLocations.filter(\r\n                (location) =>\r\n                    !alreadyEliminateBlocks.some((l) =>\r\n                        isLocationEqual(l, location)\r\n                    )\r\n            );\r\n        } else if (\r\n            specialBlockInfo.blockConfig.special === BlockSpecialType.COLUMN\r\n        ) {\r\n            // 列消除\r\n            const targetColumn = specialBlockInfo.location.column;\r\n            const rowCount = gameCheckInfo.gameMapInfo.length;\r\n            // 受影响的方块位置\r\n            const effectedLocations: Location[] = new Array(rowCount)\r\n                .fill(null)\r\n                .map((_, index) => ({\r\n                    row: index,\r\n                    column: targetColumn,\r\n                }));\r\n            // 需要额外消除的方块位置\r\n            extraEliminateLocations = effectedLocations.filter(\r\n                (location) =>\r\n                    !alreadyEliminateBlocks.some((l) =>\r\n                        isLocationEqual(l, location)\r\n                    )\r\n            );\r\n        } else if (\r\n            specialBlockInfo.blockConfig.special === BlockSpecialType.BOOM\r\n        ) {\r\n            // 3 * 3 消除\r\n            const centerLocation = specialBlockInfo.location;\r\n            const effectLocations: Location[] = [];\r\n\r\n            const isInRange = (row: number, column: number) => {\r\n                return (\r\n                    row >= 0 &&\r\n                    row < gameCheckInfo.gameMapInfo.length &&\r\n                    column >= 0 &&\r\n                    column < gameCheckInfo.gameMapInfo[0].length\r\n                );\r\n            };\r\n\r\n            // 3 * 3 消除，遍历3 * 3 范围内的方块\r\n            const rowOffsetList = [-1, 0, 1];\r\n            const columnOffsetList = [-1, 0, 1];\r\n            for (const row of rowOffsetList) {\r\n                for (const column of columnOffsetList) {\r\n                    const targetRow = centerLocation.row + row;\r\n                    const targetColumn = centerLocation.column + column;\r\n                    if (isInRange(targetRow, targetColumn)) {\r\n                        effectLocations.push({\r\n                            row: targetRow,\r\n                            column: targetColumn,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            // 四个角落的方块\r\n            const offsetList = [\r\n                cc.v2(2, 0),\r\n                cc.v2(0, 2),\r\n                cc.v2(-2, 0),\r\n                cc.v2(0, -2),\r\n            ];\r\n            for (const offset of offsetList) {\r\n                const targetRow = centerLocation.row + offset.x;\r\n                const targetColumn = centerLocation.column + offset.y;\r\n                if (isInRange(targetRow, targetColumn)) {\r\n                    effectLocations.push({\r\n                        row: targetRow,\r\n                        column: targetColumn,\r\n                    });\r\n                }\r\n                // 需要额外消除的方块位置\r\n                extraEliminateLocations = effectLocations.filter(\r\n                    (location) =>\r\n                        !alreadyEliminateBlocks.some((l) =>\r\n                            isLocationEqual(l, location)\r\n                        )\r\n                );\r\n            }\r\n        } else if (\r\n            specialBlockInfo.blockConfig.special ===\r\n            BlockSpecialType.SPECIAL_BOOM\r\n        ) {\r\n            // 同类消除\r\n            const entryBlockConfig =\r\n                gameCheckInfo.gameMapInfo[entryLocation.row][\r\n                    entryLocation.column\r\n                ];\r\n            const targetType = entryBlockConfig.type;\r\n            // 受影响的方块位置\r\n            const effectLocations: Location[] = [];\r\n            // 遍历游戏地图信息\r\n            for (let row = 0; row < gameCheckInfo.gameMapInfo.length; row++) {\r\n                const rowBlocks = gameCheckInfo.gameMapInfo[row];\r\n                for (let col = 0; col < rowBlocks.length; col++) {\r\n                    const block = rowBlocks[col];\r\n                    if (\r\n                        block.type === targetType &&\r\n                        block.special !== BlockSpecialType.SPECIAL_BOOM\r\n                    ) {\r\n                        effectLocations.push({\r\n                            row,\r\n                            column: col,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            // 需要额外消除的方块位置\r\n            extraEliminateLocations = effectLocations.filter(\r\n                (location) =>\r\n                    !alreadyEliminateBlocks.some((l) =>\r\n                        isLocationEqual(l, location)\r\n                    )\r\n            );\r\n        }\r\n\r\n        // 获取需要额外消除的方块\r\n        const extraEliminateBlockInfos: Array<EliminateBlockInfo> =\r\n            extraEliminateLocations.reduce((acc, location) => {\r\n                const blockConfig =\r\n                    gameCheckInfo.gameMapInfo[location.row][location.column];\r\n                const blockInfo: EliminateBlockInfo = {\r\n                    location,\r\n                    blockConfig,\r\n                };\r\n                if (blockConfig.special !== BlockSpecialType.NONE) {\r\n                    // 是否是特殊方块,是则加入特殊方块数组,进一步处理\r\n                    specialBlockConfig.push(blockInfo);\r\n                }\r\n                return acc.concat(blockInfo);\r\n            }, [] as Array<EliminateBlockInfo>);\r\n        // 加入可消除方块检查信息\r\n        gameCheckInfo.canEliminateCheckInfos.push({\r\n            entryLocation: specialBlockInfo.location,\r\n            eliminateBlockType: specialBlockInfo.blockConfig.special,\r\n            contiguousLocations: extraEliminateBlockInfos.map(\r\n                (info) => info.location\r\n            ),\r\n        });\r\n\r\n        // 将需要额外消除的方块加入已消除方块集合\r\n        alreadyEliminateBlocks.push(...extraEliminateLocations);\r\n    }\r\n}\r\n","export const TOUCH_BLOCK_EVENT = 'TOUCH_BLOCK_EVENT';\r\n\r\nexport enum Direction {\r\n    NONE = 'none',\r\n    UP = 'up',\r\n    DOWN = 'down',\r\n    LEFT = 'left',\r\n    RIGHT = 'right',\r\n}\r\n\r\nexport const DirectionVector = {\r\n    [Direction.UP]: new cc.Vec2(0, 1),\r\n    [Direction.DOWN]: new cc.Vec2(0, -1),\r\n    [Direction.LEFT]: new cc.Vec2(-1, 0),\r\n    [Direction.RIGHT]: new cc.Vec2(1, 0),\r\n};\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class NewClass extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    label: cc.Label = null;\r\n\r\n    @property\r\n    text: string = 'hello';\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start () {\r\n\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","/**\r\n * 游戏状态枚举\r\n * 定义游戏的所有可能状态\r\n */\r\nexport enum GameState {\r\n    /** 准备完成 */\r\n    READY = 'ready',\r\n    /** 游玩中 */\r\n    PLAYING = 'playing',\r\n    /** 检查消除 */\r\n    CHECKING = 'checking',\r\n    /** 消除,并释放特性 */\r\n    ELIMINATING = 'eliminating',\r\n    /** 随机产生并掉落 */\r\n    DROPPING = 'dropping',\r\n    /** 游戏结束 */\r\n    GAME_OVER = 'gameOver',\r\n    /** 过关 */\r\n    GAME_WIN = 'gameWin',\r\n}\r\n\r\n/**\r\n * 状态变化回调函数类型\r\n */\r\nexport type StateChangeCallback = (\r\n    fromState: GameState,\r\n    toState: GameState\r\n) => void;\r\n\r\n/**\r\n * 游戏状态机\r\n * 管理游戏的状态转换和状态相关的逻辑\r\n */\r\nexport default class GameFsm {\r\n    /** 当前状态 */\r\n    private _currentState: GameState;\r\n\r\n    /** 状态变化回调列表 */\r\n    private _stateChangeCallbacks: StateChangeCallback[] = [];\r\n\r\n    /** 状态转换规则 - 定义哪些状态可以转换到哪些状态 */\r\n    private _stateTransitions: Map<GameState, GameState[]>;\r\n\r\n    constructor(initialState: GameState = GameState.READY) {\r\n        this._currentState = initialState;\r\n        this._stateTransitions = new Map();\r\n        this._initStateTransitions();\r\n    }\r\n\r\n    /**\r\n     * 初始化状态转换规则\r\n     * 定义每个状态可以转换到哪些状态\r\n     */\r\n    private _initStateTransitions(): void {\r\n        // Ready 状态可以转换到 Playing\r\n        this._stateTransitions.set(GameState.READY, [GameState.PLAYING]);\r\n\r\n        // Playing 状态可以转换到 Checking、GameOver、GameWin\r\n        this._stateTransitions.set(GameState.PLAYING, [\r\n            GameState.CHECKING,\r\n            GameState.GAME_OVER,\r\n            GameState.GAME_WIN,\r\n        ]);\r\n\r\n        // Checking 状态可以转换到 Playing、Eliminating、GameOver、GameWin\r\n        this._stateTransitions.set(GameState.CHECKING, [\r\n            GameState.PLAYING,\r\n            GameState.ELIMINATING,\r\n            GameState.GAME_OVER,\r\n            GameState.GAME_WIN,\r\n        ]);\r\n\r\n        // Eliminating 状态可以转换到 Dropping、GameOver、GameWin\r\n        this._stateTransitions.set(GameState.ELIMINATING, [\r\n            GameState.DROPPING,\r\n            GameState.GAME_OVER,\r\n            GameState.GAME_WIN,\r\n        ]);\r\n\r\n        // Dropping 状态可以转换到 Checking、GameOver、GameWin\r\n        this._stateTransitions.set(GameState.DROPPING, [\r\n            GameState.CHECKING,\r\n            GameState.GAME_OVER,\r\n            GameState.GAME_WIN,\r\n        ]);\r\n\r\n        // GameOver 和 GameWin 是终止状态，只能转换到 Ready (重新开始)\r\n        this._stateTransitions.set(GameState.GAME_OVER, [GameState.READY]);\r\n        this._stateTransitions.set(GameState.GAME_WIN, [GameState.READY]);\r\n    }\r\n\r\n    /**\r\n     * 获取当前状态\r\n     */\r\n    public get currentState(): GameState {\r\n        return this._currentState;\r\n    }\r\n\r\n    /**\r\n     * 检查是否可以从当前状态转换到目标状态\r\n     * @param toState 目标状态\r\n     * @returns 是否可以转换\r\n     */\r\n    public canTransitionTo(toState: GameState): boolean {\r\n        const allowedStates = this._stateTransitions.get(this._currentState);\r\n        return allowedStates ? allowedStates.includes(toState) : false;\r\n    }\r\n\r\n    /**\r\n     * 转换到新状态\r\n     * @param newState 新状态\r\n     * @param force 是否强制转换（忽略转换规则）\r\n     * @returns 是否转换成功\r\n     */\r\n    public changeState(newState: GameState, force: boolean = false): boolean {\r\n        // 如果状态相同，不执行转换\r\n        if (this._currentState === newState) {\r\n            console.warn(`[GameFsm] 已经处于状态: ${newState}`);\r\n            return false;\r\n        }\r\n\r\n        // 检查是否允许转换\r\n        if (!force && !this.canTransitionTo(newState)) {\r\n            console.warn(\r\n                `[GameFsm] 无法从状态 ${this._currentState} 转换到 ${newState}`\r\n            );\r\n            return false;\r\n        }\r\n\r\n        const oldState = this._currentState;\r\n        this._currentState = newState;\r\n\r\n        console.log(`[GameFsm] 状态转换: ${oldState} -> ${newState}`);\r\n\r\n        // 触发状态变化回调\r\n        this._notifyStateChange(oldState, newState);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 注册状态变化回调\r\n     * @param callback 回调函数\r\n     */\r\n    public onStateChange(callback: StateChangeCallback): void {\r\n        if (!this._stateChangeCallbacks.includes(callback)) {\r\n            this._stateChangeCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除状态变化回调\r\n     * @param callback 回调函数\r\n     */\r\n    public offStateChange(callback: StateChangeCallback): void {\r\n        const index = this._stateChangeCallbacks.indexOf(callback);\r\n        if (index !== -1) {\r\n            this._stateChangeCallbacks.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通知所有监听者状态已改变\r\n     * @param fromState 原状态\r\n     * @param toState 新状态\r\n     */\r\n    private _notifyStateChange(fromState: GameState, toState: GameState): void {\r\n        this._stateChangeCallbacks.forEach((callback) => {\r\n            try {\r\n                callback(fromState, toState);\r\n            } catch (error) {\r\n                console.error('[GameFsm] 状态变化回调执行错误:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 检查是否处于某个状态\r\n     * @param state 要检查的状态\r\n     */\r\n    public isState(state: GameState): boolean {\r\n        return this._currentState === state;\r\n    }\r\n\r\n    /**\r\n     * 检查是否处于游戏进行中的状态（非结束状态）\r\n     */\r\n    public isGameActive(): boolean {\r\n        return (\r\n            this._currentState !== GameState.GAME_OVER &&\r\n            this._currentState !== GameState.GAME_WIN &&\r\n            this._currentState !== GameState.READY\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 检查是否可以进行玩家操作\r\n     */\r\n    public canPlayerOperate(): boolean {\r\n        return this._currentState === GameState.PLAYING;\r\n    }\r\n\r\n    /**\r\n     * 重置状态机到初始状态\r\n     */\r\n    public reset(): void {\r\n        const oldState = this._currentState;\r\n        this._currentState = GameState.READY;\r\n        console.log(`[GameFsm] 状态机重置到: ${GameState.READY}`);\r\n        this._notifyStateChange(oldState, GameState.READY);\r\n    }\r\n\r\n    /**\r\n     * 清理状态机，移除所有回调\r\n     */\r\n    public destroy(): void {\r\n        this._stateChangeCallbacks = [];\r\n        console.log('[GameFsm] 状态机已销毁');\r\n    }\r\n}\r\n","import PlayPanel from './PlayPanel';\r\nimport { Direction, TOUCH_BLOCK_EVENT } from './GameConst';\r\nimport TouchHandler, {\r\n    TouchDetailEvent,\r\n    TouchDetailEventType,\r\n} from './TouchHandler';\r\nimport {\r\n    BlockConfig,\r\n    BlockSpecialType,\r\n    BlockType,\r\n    EliminateCheckInfo,\r\n    EliminateScore,\r\n    GameCheckInfo,\r\n    LevelConfig,\r\n    Location,\r\n    UserLevelInfo,\r\n} from './GameTypes';\r\nimport { getSwapLocation, isNeighborLocation } from './common/GameUtils';\r\nimport {\r\n    releaseSpecialBlock,\r\n    specialBlockGenerator,\r\n} from './common/EliminateUtils';\r\nimport GameUI from './ui/GameUI';\r\nimport EffectMgr from './effects/EffectMgr';\r\nimport AudioMgr from '../AudioMgr';\r\nimport BlockMgr from './block/BlockMgr';\r\nimport GameFsm, { GameState } from './common/GameFsm';\r\nimport { getLocalData, setLocalData } from '../Utils';\r\nimport { UserSaveDataName } from '../const';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class GameMgr extends cc.Component {\r\n    @property(PlayPanel)\r\n    playPanel: PlayPanel = null;\r\n\r\n    @property(GameUI)\r\n    gameUI: GameUI = null;\r\n\r\n    @property(TouchHandler)\r\n    touchHandler: TouchHandler = null;\r\n\r\n    @property(BlockMgr)\r\n    blockMgr: BlockMgr = null;\r\n\r\n    @property(EffectMgr)\r\n    effectMgr: EffectMgr = null;\r\n\r\n    @property(AudioMgr)\r\n    audioMgr: AudioMgr = null;\r\n\r\n    _selectedLocation: Location = null;\r\n\r\n    _gameFsm: GameFsm = null;\r\n    _gameCheckInfo: GameCheckInfo = null;\r\n\r\n    protected onLoad(): void {\r\n        this._gameFsm = new GameFsm(GameState.READY);\r\n        this._gameFsm.onStateChange(this.onStateChange.bind(this));\r\n        this.touchHandler.node.on(TOUCH_BLOCK_EVENT, this.onTouchEvent, this);\r\n    }\r\n\r\n    protected start(): void {\r\n        this.audioMgr.playMusic();\r\n    }\r\n\r\n    public initGamePanel(levelConfig: LevelConfig): void {\r\n        this.playPanel.initGamePanel(\r\n            levelConfig,\r\n            this.blockMgr,\r\n            this.effectMgr\r\n        );\r\n        this.gameUI.initGameUI(0, levelConfig.stepLimit);\r\n        // 初始化游戏面板后，转换到游玩状态\r\n        this._gameFsm.changeState(GameState.PLAYING);\r\n    }\r\n\r\n    /**\r\n     * 游戏状态改变回调\r\n     *\r\n     * @param fromState 当前状态\r\n     * @param toState 新状态\r\n     */\r\n    public onStateChange(fromState: GameState, toState: GameState): void {\r\n        switch (toState) {\r\n            case GameState.READY:\r\n                this.onReady();\r\n                break;\r\n            case GameState.PLAYING:\r\n                this.onPlaying();\r\n                break;\r\n            case GameState.CHECKING:\r\n                this.onChecking();\r\n                break;\r\n            case GameState.ELIMINATING:\r\n                this.onEliminating();\r\n                break;\r\n            case GameState.DROPPING:\r\n                this.onDropping();\r\n                break;\r\n            case GameState.GAME_OVER:\r\n                this.onGameOver();\r\n                break;\r\n            case GameState.GAME_WIN:\r\n                this.onGameWin();\r\n                break;\r\n        }\r\n    }\r\n\r\n    public onTouchEvent(event: TouchDetailEvent): void {\r\n        // 非玩家操作 或 没有步数\r\n        if (!this._gameFsm.canPlayerOperate() || !this.gameUI.haveStepCount()) {\r\n            return;\r\n        }\r\n        // 玩家可操作\r\n        const { type, location } = event;\r\n        if (type === TouchDetailEventType.click) {\r\n            this.onClickBlock(location);\r\n        } else if (type === TouchDetailEventType.drag) {\r\n            this.onDragBlock(location, event.direction || Direction.NONE);\r\n        }\r\n    }\r\n\r\n    // 点击方块\r\n    protected onClickBlock(location: Location): void {\r\n        if (!this._selectedLocation) {\r\n            this._selectedLocation = location;\r\n            return;\r\n        }\r\n        // 点击方块\r\n        const isSameBlock =\r\n            this._selectedLocation.row === location.row &&\r\n            this._selectedLocation.column === location.column;\r\n        if (isSameBlock) {\r\n            // 点击同一个方块，取消选中\r\n            this._selectedLocation = null;\r\n            return;\r\n        }\r\n        const isNeighbor = isNeighborLocation(this._selectedLocation, location);\r\n        if (isNeighbor) {\r\n            // 点击相邻方块，交换方块\r\n            this.swapBlocks(this._selectedLocation, location);\r\n            this._selectedLocation = null;\r\n        } else {\r\n            // 点击非相邻方块，更新选中\r\n            this._selectedLocation = location;\r\n        }\r\n    }\r\n\r\n    // 拖动方块\r\n    protected onDragBlock(location: Location, direction: Direction): void {\r\n        const swapLocation = getSwapLocation(location, direction);\r\n        if (this.playPanel.isInBounds(swapLocation)) {\r\n            // 以交换后的方块位置优先级更高\r\n            this.swapBlocks(swapLocation, location);\r\n        }\r\n        this._selectedLocation = null;\r\n    }\r\n\r\n    protected swapBlocks(location1: Location, location2: Location): void {\r\n        this._gameCheckInfo = this.generatetBaseGameCheckInfo();\r\n        // 交换方块\r\n        this._gameCheckInfo.checkBlockEntry = [location1, location2];\r\n        // 1. 交换方块\r\n        const gameMapInfo = this._gameCheckInfo.gameMapInfo;\r\n        const tempConfig = gameMapInfo[location2.row][location2.column];\r\n        gameMapInfo[location2.row][location2.column] =\r\n            gameMapInfo[location1.row][location1.column];\r\n        gameMapInfo[location1.row][location1.column] = tempConfig;\r\n\r\n        this._gameCheckInfo.swapBlocks = [location1, location2];\r\n        this.audioMgr.playSwapAudio();\r\n        // 减少步数\r\n        // 转换到检查消除状态\r\n        this._gameFsm.changeState(GameState.CHECKING);\r\n        // 2. 规则检查\r\n        // 3. 撤回 或 消除\r\n        // 4. 掉落 执行第 2 步\r\n        // 5. 结束\r\n    }\r\n\r\n    public onReady(): void {\r\n        console.log('游戏状态准备完成');\r\n    }\r\n\r\n    public onPlaying(): void {\r\n        console.log('游戏状态游玩中');\r\n        this._gameCheckInfo = null;\r\n        this.touchHandler.setEnabled(true);\r\n    }\r\n\r\n    public onChecking(): void {\r\n        // 检查消除,并标记可消除方块\r\n        // console.log('游戏状态检查消除');\r\n        this.touchHandler.setEnabled(false);\r\n\r\n        const excludeLocations = [];\r\n        for (const entry of this._gameCheckInfo.checkBlockEntry) {\r\n            const contiguousLocations = this.playPanel.getContiguousBlocks(\r\n                entry,\r\n                this._gameCheckInfo.gameMapInfo,\r\n                excludeLocations\r\n            );\r\n            // 如果连续方块数量大于等于3，则标记为可消除\r\n            if (contiguousLocations.length >= 3) {\r\n                // 将可消除方块加入排除列表\r\n                excludeLocations.push(...contiguousLocations);\r\n                // 将可消除方块加入可消除方块数组\r\n                this._gameCheckInfo.canEliminateCheckInfos.push({\r\n                    entryLocation: entry,\r\n                    eliminateBlockType: BlockSpecialType.NONE,\r\n                    contiguousLocations,\r\n                });\r\n            }\r\n        }\r\n        // 检查特殊炸弹方块\r\n        if (this._gameCheckInfo.swapBlocks) {\r\n            const [location1, location2] = this._gameCheckInfo.swapBlocks;\r\n            const blockConfig1 =\r\n                this._gameCheckInfo.gameMapInfo[location1.row][\r\n                    location1.column\r\n                ];\r\n            const blockConfig2 =\r\n                this._gameCheckInfo.gameMapInfo[location2.row][\r\n                    location2.column\r\n                ];\r\n            if (blockConfig1.special === BlockSpecialType.SPECIAL_BOOM) {\r\n                // 特殊炸弹方块，直接标记为可消除\r\n                this._gameCheckInfo.canEliminateCheckInfos.push({\r\n                    entryLocation: location2,\r\n                    eliminateBlockType: BlockSpecialType.NONE,\r\n                    contiguousLocations: [location1],\r\n                });\r\n            }\r\n            if (blockConfig2.special === BlockSpecialType.SPECIAL_BOOM) {\r\n                // 特殊炸弹方块，直接标记为可消除\r\n                this._gameCheckInfo.canEliminateCheckInfos.push({\r\n                    entryLocation: location1,\r\n                    eliminateBlockType: BlockSpecialType.NONE,\r\n                    contiguousLocations: [location2],\r\n                });\r\n            }\r\n        }\r\n\r\n        if (this._gameCheckInfo.canEliminateCheckInfos.length > 0) {\r\n            // 减少步数\r\n            this._gameCheckInfo.swapBlocks && this.gameUI.decrementStepCount();\r\n            // 转换到消除状态\r\n            this._gameFsm.changeState(GameState.ELIMINATING);\r\n        } else {\r\n            if (this._gameCheckInfo.swapBlocks) {\r\n                const [location1, location2] = this._gameCheckInfo.swapBlocks;\r\n                // 方块交换再还原\r\n                this.playPanel.swapAndBackBlocks(location1, location2, () => {\r\n                    // 没有可消除方块，方块交换再还原，转换到游玩状态\r\n                    this._gameFsm.changeState(GameState.PLAYING);\r\n                });\r\n            } else {\r\n                // 没有可消除方块 且 没有交换方块，检查游戏是否结束\r\n                this.checkGameOver();\r\n            }\r\n        }\r\n    }\r\n\r\n    public onEliminating(): void {\r\n        // 获取已经消除的方块\r\n        const alreadyEliminateBlocks: Array<Location> =\r\n            this._gameCheckInfo.canEliminateCheckInfos.reduce((acc, info) => {\r\n                return acc.concat(info.contiguousLocations);\r\n            }, [] as Array<Location>);\r\n        // 消除方块,并释放特性\r\n        for (const eliminateCheckInfo of this._gameCheckInfo\r\n            .canEliminateCheckInfos) {\r\n            // 生成特殊方块\r\n            specialBlockGenerator(eliminateCheckInfo, this._gameCheckInfo);\r\n            // 释放特性, 消除额外方块\r\n            releaseSpecialBlock(\r\n                eliminateCheckInfo,\r\n                alreadyEliminateBlocks,\r\n                this._gameCheckInfo\r\n            );\r\n        }\r\n        // 计算得分\r\n        let score = 0;\r\n        for (const eliminateCheckInfo of this._gameCheckInfo\r\n            .canEliminateCheckInfos) {\r\n            const blockCount = eliminateCheckInfo.contiguousLocations.length;\r\n            // 基础得分\r\n            score += EliminateScore.EliminateBlockScore * blockCount;\r\n            // 特殊得分\r\n            switch (eliminateCheckInfo.eliminateBlockType) {\r\n                case BlockSpecialType.ROW:\r\n                    score += EliminateScore.Base4RowScore;\r\n                    break;\r\n                case BlockSpecialType.COLUMN:\r\n                    score += EliminateScore.Base4ColumnScore;\r\n                    break;\r\n                case BlockSpecialType.BOOM:\r\n                    score += EliminateScore.Irregular5Score;\r\n                    break;\r\n                case BlockSpecialType.SPECIAL_BOOM:\r\n                    score += EliminateScore.Base5Score;\r\n                    break;\r\n            }\r\n        }\r\n        // 连锁加成\r\n        score *= this._gameCheckInfo.chainCount;\r\n        // 增加得分\r\n        this.gameUI.incrementScore(score);\r\n        // 消除方块,并执行动画\r\n        this.effectMgr.playComboAudio(this._gameCheckInfo.chainCount);\r\n        this.playPanel.eliminateBlocks(this._gameCheckInfo, () => {\r\n            this._gameFsm.changeState(GameState.DROPPING);\r\n        });\r\n        // console.log('游戏状态消除,并释放特性');\r\n        // this._gameFsm.changeState(GameState.DROPPING);\r\n    }\r\n\r\n    public onDropping(): void {\r\n        // 随机产生并掉落方块\r\n        // 1. 生成特殊方块\r\n        this.playPanel.generateNewSpecialBlocks(this._gameCheckInfo);\r\n        // 2. 掉落随机方块补齐位置\r\n        this.playPanel.dropRandomBlocks((entryList: Array<Location>) => {\r\n            const baseGameCheckInfo = this.generatetBaseGameCheckInfo();\r\n            baseGameCheckInfo.checkBlockEntry = entryList;\r\n            // 连锁次数 + 1\r\n            baseGameCheckInfo.chainCount = this._gameCheckInfo.chainCount + 1;\r\n            this._gameCheckInfo = baseGameCheckInfo;\r\n            console.log('drop check: ', this._gameCheckInfo);\r\n            this._gameFsm.changeState(GameState.CHECKING);\r\n        });\r\n    }\r\n\r\n    public onGameOver(): void {\r\n        // 显示游戏结束界面\r\n        this.gameUI.showGameOverPanel();\r\n        this.audioMgr.stopMusic();\r\n        this.touchHandler.setEnabled(false);\r\n    }\r\n\r\n    public onGameWin(): void {\r\n        // 显示过关界面\r\n        this.gameUI.showGameWinPanel();\r\n        this.audioMgr.stopMusic();\r\n        // 更新最大关卡ID\r\n        const saveData = getLocalData<UserLevelInfo>(UserSaveDataName);\r\n        if (saveData.maxLevelId < this.playPanel.getLevelConfig().id) {\r\n            setLocalData(UserSaveDataName, {\r\n                maxLevelId: this.playPanel.getLevelConfig().id,\r\n            });\r\n        }\r\n        this.touchHandler.setEnabled(false);\r\n    }\r\n\r\n    /**\r\n     * 检查游戏是否结束\r\n     */\r\n    public checkGameOver(): void {\r\n        const curScore = this.gameUI.getScore();\r\n        const targetScore = this.playPanel.getLevelConfig().targetScore;\r\n        if (curScore >= targetScore) {\r\n            // 得分大于等于目标分数，游戏胜利\r\n            this._gameFsm.changeState(GameState.GAME_WIN);\r\n        }\r\n        // 检查游戏是否结束, 还有步数则继续游戏，否则游戏结束\r\n        else if (this.gameUI.haveStepCount()) {\r\n            const { chainCount } = this._gameCheckInfo;\r\n            this.effectMgr.playCommentAudio(chainCount - 1);\r\n            // 还有步数，继续游戏\r\n            this._gameFsm.changeState(GameState.PLAYING);\r\n        } else {\r\n            // 没有步数，游戏结束\r\n            this._gameFsm.changeState(GameState.GAME_OVER);\r\n        }\r\n    }\r\n\r\n    public backToLevelSelect(): void {\r\n        cc.director.loadScene('LevelSelect');\r\n    }\r\n\r\n    public generatetBaseGameCheckInfo(): GameCheckInfo {\r\n        // 生成基础游戏检查信息\r\n        const gameMapInfo = this.playPanel.getBlockMapInfo();\r\n        const checkBlockEntry: Location[] = [];\r\n        const canEliminateBlocks: Array<EliminateCheckInfo> = [];\r\n        const eliminateScore = 0;\r\n        const newSpecailBlocks: Record<string, BlockConfig> = {};\r\n        return {\r\n            gameMapInfo,\r\n            checkBlockEntry,\r\n            swapBlocks: null,\r\n            chainCount: 1,\r\n            canEliminateCheckInfos: canEliminateBlocks,\r\n            eliminateScore,\r\n            newSpecailBlocks,\r\n        };\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        cc.audioEngine.stopAllEffects();\r\n        cc.audioEngine.stopMusic();\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport { UserSettingItemName } from './const';\r\nimport { UserSetting } from './type/ConfigTypes';\r\nimport { getLocalData, setLocalData } from './Utils';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class GameSetting extends cc.Component {\r\n    @property(cc.Slider)\r\n    bgmVolumeCrl: cc.Slider = null;\r\n\r\n    @property(cc.Slider)\r\n    effectVolumeCrl: cc.Slider = null;\r\n\r\n    _config: UserSetting = { bgmVolume: 1, effectVolume: 1 };\r\n\r\n    protected start(): void {\r\n        this._config = getLocalData<UserSetting>(UserSettingItemName);\r\n        this.bgmVolumeCrl.progress = this._config.bgmVolume;\r\n        this.effectVolumeCrl.progress = this._config.effectVolume;\r\n        this.bindEvents();\r\n    }\r\n\r\n    protected bindEvents(): void {\r\n        this.bgmVolumeCrl.node.on('slide', this.onBgmVolumeChange, this);\r\n        this.effectVolumeCrl.node.on('slide', this.onEffectVolumeChange, this);\r\n    }\r\n\r\n    onBgmVolumeChange(slider): void {\r\n        this._config.bgmVolume = slider.progress;\r\n        setLocalData(UserSettingItemName, this._config);\r\n        cc.audioEngine.setMusicVolume(this._config.bgmVolume);\r\n    }\r\n\r\n    onEffectVolumeChange(slider): void {\r\n        this._config.effectVolume = slider.progress;\r\n        setLocalData(UserSettingItemName, this._config);\r\n        cc.audioEngine.setEffectsVolume(this._config.effectVolume);\r\n    }\r\n\r\n    // protected onDestroy(): void {\r\n    //     this.bgmVolumeCrl.node.off('slider', this.onBgmVolumeChange, this);\r\n    //     this.effectVolumeCrl.node.off('slider', this.onEffectVolumeChange, this);\r\n    // }\r\n}\r\n","import BaseBlock from './block/BaseBlock';\r\n\r\nexport type Location = { row: number; column: number };\r\n\r\n// 方块样式\r\nexport enum BlockType {\r\n    BLOCK_TYPE_1 = 1,\r\n    BLOCK_TYPE_2 = 2,\r\n    BLOCK_TYPE_3 = 3,\r\n    BLOCK_TYPE_4 = 4,\r\n    BLOCK_TYPE_5 = 5,\r\n}\r\n\r\n// 方块类型\r\nexport enum BlockSpecialType {\r\n    NONE = 'none', // 普通方块\r\n    ROW = 'row', // 行消除\r\n    COLUMN = 'column', // 列消除\r\n    BOOM = 'boom', // 炸弹\r\n    SPECIAL_BOOM = 'special_boom', // 特殊炸弹\r\n}\r\n\r\n// 消除类型\r\nexport enum EliminateType {\r\n    BASE_3 = 'base_3', // 基础3连消\r\n    BASE_4_ROW = 'base_4_row', // 基础4连消行\r\n    BASE_4_COLUMN = 'base_4_column', // 基础4连消列\r\n    BASE_5 = 'base_5', // 基础5连消\r\n    IRREGULAR_5 = 'irregular_5', // 异形5连消\r\n}\r\n\r\nexport enum EliminateScore {\r\n    EliminateBlockScore = 10, // 消除方块得分\r\n    Base4RowScore = 50, // 基础4连消行得分\r\n    Base4ColumnScore = 50, // 基础4连消列得分\r\n    Base5Score = 200, // 基础5连消得分\r\n    Irregular5Score = 100, // 异形5连消得分\r\n}\r\n\r\nexport interface UserLevelInfo {\r\n    maxLevelId: number; // 最大关卡ID\r\n}\r\n\r\n// 游戏配置\r\nexport interface GameConfig {\r\n    level: string;\r\n    levelConfig: LevelConfig;\r\n}\r\n\r\n// 关卡配置\r\nexport interface LevelConfig {\r\n    id: number; // 关卡ID\r\n    stepLimit: number; // 步数限制\r\n    targetScore: number; // 目标分数\r\n    gameMap: GameMap; // 游戏地图\r\n}\r\n\r\n// 游戏地图\r\nexport interface GameMap {\r\n    width: number; // 行数\r\n    height: number; // 列数\r\n    blocks: Record<string, BlockConfig>; // 方块\r\n}\r\n\r\n// 方块\r\nexport interface BlockConfig {\r\n    type: BlockType; // 方块样式\r\n    special: BlockSpecialType; // 方块特殊类型\r\n}\r\n\r\n/**\r\n * 游戏检查信息\r\n * @param gameMapInfo 游戏地图信息\r\n * @param checkBlockEntry 检查方块入口\r\n * @param swapBlocks 交换方块\r\n * @param eliminateScore 消除得分\r\n * @param canEliminateCheckInfos 可消除方块检查信息\r\n * @param newSpecailBlocks 新特殊方块\r\n */\r\nexport interface GameCheckInfo {\r\n    gameMapInfo: Array<Array<BlockConfig>>; // 游戏地图信息\r\n    checkBlockEntry: Location[]; // 检查方块入口\r\n    swapBlocks: [Location, Location] | null; // 交换方块, 如果为 null，则表示没有交换方块\r\n    chainCount: number; // 连锁次数\r\n    eliminateScore: number; // 消除得分\r\n    canEliminateCheckInfos: Array<EliminateCheckInfo>; // 可消除方块检查信息\r\n    newSpecailBlocks: Record<string, BlockConfig>; // 新特殊方块\r\n}\r\n\r\n/**\r\n * 可消除方块检查信息\r\n * @param entryLocation 检查方块入口\r\n * @param eliminateBlockType 特殊方块类型\r\n * @param contiguousLocations 连续方块\r\n */\r\nexport interface EliminateCheckInfo {\r\n    entryLocation: Location; // 检查方块入口\r\n    eliminateBlockType: BlockSpecialType; // 特殊方块类型\r\n    contiguousLocations: Array<Location>; // 连续方块\r\n}\r\n\r\n/**\r\n * 消除方块信息\r\n * @param location 方块位置\r\n * @param blockConfig 方块配置\r\n */\r\nexport interface EliminateBlockInfo {\r\n    location: Location; // 方块位置\r\n    blockConfig: BlockConfig; // 方块配置\r\n}\r\n\r\n/**\r\n * 方块掉落信息\r\n * @param location 方块位置\r\n * @param block 方块\r\n * @param dropTime 掉落时间\r\n * @param targetLocation 目标位置\r\n */\r\nexport interface BlockDropInfo {\r\n    location: Location; // 方块位置\r\n    block: BaseBlock; // 方块\r\n    dropTime: number; // 掉落时间\r\n    targetDropLocation: Location; // 目标掉落位置\r\n}\r\n","const { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class GameUI extends cc.Component {\r\n    @property(cc.Label)\r\n    scoreLabel: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    stepCountLabel: cc.Label = null;\r\n\r\n    @property(cc.Node)\r\n    gameOverPanel: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    gameWinPanel: cc.Node = null;\r\n\r\n    _score: number = 0;\r\n    _stepCount: number = 0;\r\n\r\n    // 初始化游戏UI\r\n    public initGameUI(score: number, stepCount: number): void {\r\n        this._score = score;\r\n        this._stepCount = stepCount;\r\n        this.scoreLabel.string = this._score.toString();\r\n        this.stepCountLabel.string = this._stepCount.toString();\r\n    }\r\n\r\n    // 设置得分\r\n    public setScore(score: number): void {\r\n        this.scoreLabel.string = score.toString();\r\n    }\r\n\r\n    // 设置步数\r\n    public setStepCount(stepCount: number): void {\r\n        this.stepCountLabel.string = stepCount.toString();\r\n    }\r\n\r\n    // 减少步数\r\n    public decrementStepCount(): void {\r\n        this._stepCount--;\r\n        this.stepCountLabel.string = this._stepCount.toString();\r\n    }\r\n\r\n    // 增加得分\r\n    public incrementScore(score: number): void {\r\n        this._score += score;\r\n        this.scoreLabel.string = this._score.toString();\r\n    }\r\n\r\n    // 是否还有步数\r\n    public haveStepCount(): boolean {\r\n        return this._stepCount > 0;\r\n    }\r\n\r\n    // 获取得分\r\n    public getScore(): number {\r\n        return this._score;\r\n    }\r\n\r\n    public showGameOverPanel(): void {\r\n        this.gameOverPanel.active = true;\r\n    }\r\n\r\n    public showGameWinPanel(): void {\r\n        this.gameWinPanel.active = true;\r\n    }\r\n}\r\n","import { Direction, DirectionVector } from '../GameConst';\r\nimport {\r\n    BlockConfig,\r\n    BlockSpecialType,\r\n    BlockType,\r\n    Location,\r\n} from '../GameTypes';\r\n\r\nconst DirectionList = [\r\n    Direction.UP,\r\n    Direction.DOWN,\r\n    Direction.LEFT,\r\n    Direction.RIGHT,\r\n];\r\n\r\nexport function isLocationEqual(\r\n    location1: Location,\r\n    location2: Location\r\n): boolean {\r\n    return (\r\n        location1.row === location2.row && location1.column === location2.column\r\n    );\r\n}\r\n\r\nexport function getDirection(delta: cc.Vec2): Direction {\r\n    let minAngle = Infinity;\r\n    let minDirection = Direction.NONE;\r\n    for (const direction of DirectionList) {\r\n        const dirVec = DirectionVector[direction];\r\n        const angle = delta.normalize().angle(dirVec);\r\n        if (angle < minAngle) {\r\n            minAngle = angle;\r\n            minDirection = direction;\r\n        }\r\n    }\r\n    return minDirection;\r\n}\r\n\r\nexport function getNeighborLocations(location: Location): Array<Location> {\r\n    return [\r\n        { row: location.row - 1, column: location.column },\r\n        { row: location.row + 1, column: location.column },\r\n        { row: location.row, column: location.column - 1 },\r\n        { row: location.row, column: location.column + 1 },\r\n    ];\r\n}\r\n\r\nexport function isNeighborLocation(\r\n    location1: Location,\r\n    location2: Location\r\n): boolean {\r\n    if (location1.row === location2.row) {\r\n        return Math.abs(location1.column - location2.column) === 1;\r\n    } else if (location1.column === location2.column) {\r\n        return Math.abs(location1.row - location2.row) === 1;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function getSwapLocation(\r\n    location: Location,\r\n    direction: Direction\r\n): Location {\r\n    if (direction === Direction.NONE) {\r\n        return location;\r\n    }\r\n    const directionVector = DirectionVector[direction];\r\n    return {\r\n        row: location.row + directionVector.y,\r\n        column: location.column + directionVector.x,\r\n    };\r\n}\r\n\r\nexport function getRandomBlockConfig(): BlockConfig {\r\n    const blockConfigs = [\r\n        { type: BlockType.BLOCK_TYPE_1, special: BlockSpecialType.NONE },\r\n        { type: BlockType.BLOCK_TYPE_2, special: BlockSpecialType.NONE },\r\n        { type: BlockType.BLOCK_TYPE_3, special: BlockSpecialType.NONE },\r\n        { type: BlockType.BLOCK_TYPE_4, special: BlockSpecialType.NONE },\r\n        { type: BlockType.BLOCK_TYPE_5, special: BlockSpecialType.NONE },\r\n    ];\r\n    return blockConfigs[Math.floor(Math.random() * blockConfigs.length)];\r\n}\r\n","import { getNeighborLocations } from './GameUtils';\r\nimport { Location } from '../GameTypes';\r\n\r\nexport function stringifyLocation(row: number, column: number): string {\r\n    return `${row},${column}`;\r\n}\r\n\r\nexport function parseLocation(location: string): {\r\n    row: number;\r\n    column: number;\r\n} {\r\n    const [row, column] = location.split(',').map(Number);\r\n    return { row, column };\r\n}\r\n\r\nexport default class Grid<T> {\r\n    private width: number;\r\n    private height: number;\r\n    private cellSize: cc.Size;\r\n    private cellSpacing: number;\r\n    private data: Array<Array<T>>;\r\n\r\n    constructor(\r\n        width: number,\r\n        height: number,\r\n        cellSize: cc.Size,\r\n        cellSpacing: number\r\n    ) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.cellSize = cellSize;\r\n        this.cellSpacing = cellSpacing;\r\n        this.data = new Array<Array<T>>(height)\r\n            .fill(null)\r\n            .map(() => new Array<T>(width).fill(null));\r\n    }\r\n\r\n    public getWidth(): number {\r\n        return this.width;\r\n    }\r\n\r\n    public getHeight(): number {\r\n        return this.height;\r\n    }\r\n\r\n    public getData(): T[][] {\r\n        return this.data;\r\n    }\r\n\r\n    public setData(data: T[][]): void {\r\n        this.data = data;\r\n    }\r\n\r\n    public getCell({ row, column }: Location): T {\r\n        return this.data[row][column];\r\n    }\r\n\r\n    public setCell({ row, column }: Location, data: T): void {\r\n        this.data[row][column] = data;\r\n    }\r\n\r\n    public getCellPosition({ row, column }: Location): cc.Vec2 {\r\n        const x =\r\n            column * (this.cellSize.width + this.cellSpacing) +\r\n            this.cellSize.width / 2;\r\n        const y =\r\n            row * (this.cellSize.height + this.cellSpacing) +\r\n            this.cellSize.height / 2;\r\n        return new cc.Vec2(x, y);\r\n    }\r\n\r\n    public getTouchedLocation(position: cc.Vec2): {\r\n        row: number;\r\n        column: number;\r\n    } {\r\n        const row = Math.floor(\r\n            position.y / (this.cellSize.height + this.cellSpacing)\r\n        );\r\n        const column = Math.floor(\r\n            position.x / (this.cellSize.width + this.cellSpacing)\r\n        );\r\n        return this.isInBounds({ row, column }) ? { row, column } : null;\r\n    }\r\n\r\n    public isInBounds({ row, column }: Location): boolean {\r\n        return (\r\n            column >= 0 && column < this.width && row >= 0 && row < this.height\r\n        );\r\n    }\r\n\r\n    public getNeighbors({ row, column }: Location): Array<T> {\r\n        const neighborLocations = getNeighborLocations({ row, column });\r\n        return neighborLocations.reduce((neighbors, neighborLocation) => {\r\n            if (this.isInBounds(neighborLocation)) {\r\n                neighbors.push(this.getCell(neighborLocation));\r\n            }\r\n            return neighbors;\r\n        }, new Array<T>());\r\n    }\r\n\r\n    public getNeighborsLocations({ row, column }: Location): Array<Location> {\r\n        const neighborLocations = getNeighborLocations({ row, column });\r\n        return neighborLocations.filter((neighborLocation) =>\r\n            this.isInBounds(neighborLocation)\r\n        );\r\n    }\r\n\r\n    public getGridSize(): cc.Size {\r\n        const { width, height } = this.cellSize;\r\n        const totalWidth =\r\n            width * this.width + this.cellSpacing * (this.width - 1);\r\n        const totalHeight =\r\n            height * this.height + this.cellSpacing * (this.height - 1);\r\n        return new cc.Size(totalWidth, totalHeight);\r\n    }\r\n\r\n    public clear(): void {\r\n        this.data = new Array<Array<T>>(this.height)\r\n            .fill(null)\r\n            .map(() => new Array<T>(this.width).fill(null));\r\n    }\r\n}\r\n","import HotUpdatePanel from './HotUpdatePanel';\n\nconst { ccclass, property } = cc._decorator;\n\n/**\n * 版本号比较函数\n * @param versionA 版本号A\n * @param versionB 版本号B\n * @returns 如果版本号A大于版本号B, 返回1; 如果版本号A小于版本号B, 返回-1; 如果版本号A等于版本号B, 返回0\n */\nfunction versionCompareHandle(versionA: string, versionB: string): number {\n    cc.log(\n        '热更新版本号比较: version A is ' +\n            versionA +\n            ', version B is ' +\n            versionB\n    );\n    const vA = versionA.split('.');\n    const vB = versionB.split('.');\n    for (let i = 0; i < vA.length; ++i) {\n        const a = parseInt(vA[i]);\n        const b = parseInt(vB[i] || '0');\n        if (a === b) {\n            continue;\n        } else {\n            return a - b;\n        }\n    }\n    if (vB.length > vA.length) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n\n@ccclass\nexport default class HotUpdateMgr extends cc.Component {\n    @property(cc.Asset)\n    manifestUrl: cc.Asset = null;\n\n    @property(HotUpdatePanel)\n    hotUpdatePanel: HotUpdatePanel = null;\n\n    // 热更新资源管理器\n    _am: jsb.AssetsManager = null;\n    // 热更新资源存储路径\n    _storagePath: string = '';\n    // 是否正在更新\n    _updating: boolean = false;\n    // 是否可以重试\n    _canRetry: boolean = false;\n    // 失败次数\n    _failCount: number = 0;\n\n    /**\n     * 加载, 初始化热更新资源管理器\n     */\n    protected onLoad(): void {\n        if (!cc.sys.isNative) {\n            this.hotUpdatePanel.node.active = false;\n            return;\n        }\n        // 获取存储路径, 用于存储热更新资源\n        this._storagePath =\n            (jsb.fileUtils ? jsb.fileUtils.getWritablePath() : '/') +\n            'match-3-remote-asset';\n        cc.log('热更新资源存储路径: ' + this._storagePath);\n        // 初始化热更新资源管理器\n        this._am = new jsb.AssetsManager(\n            '',\n            this._storagePath,\n            versionCompareHandle\n        );\n\n        // 设置验证回调，用于验证资源是否下载正确\n        this._am.setVerifyCallback((path, asset) => {\n            // 是否是压缩文件\n            const compressed = asset.compressed;\n            // md5值\n            const expectedMD5 = asset.md5;\n            // 相对路径\n            const relativePath = asset.path;\n            // 文件大小\n            //const size = asset.size;\n            if (compressed) {\n                this.hotUpdatePanel.setInfo('验证通过: ' + relativePath);\n                return true;\n            } else {\n                this.hotUpdatePanel.setInfo(\n                    '验证通过: ' + relativePath + ' (' + expectedMD5 + ')'\n                );\n                return true;\n            }\n        });\n\n        this.hotUpdatePanel.setInfo('热更新准备就绪，请检查或直接更新。');\n\n        if (cc.sys.os === cc.sys.OS_ANDROID) {\n            // 某些Android设备在并发任务过多时可能会降低下载速度。\n            // 该值可能不准确，请进行更多测试，找到最适合您的游戏的值。\n            // 设置最大并发任务数为2\n            (this._am as any).setMaxConcurrentTask &&\n                (this._am as any).setMaxConcurrentTask(2);\n            this.hotUpdatePanel.setInfo('最大并发任务数限制为2');\n        }\n\n        // 设置文件进度和字节进度\n        this.hotUpdatePanel.setFileProgress(0);\n        this.hotUpdatePanel.setByteProgress(0);\n    }\n\n    private checkCb(event: jsb.EventAssetsManager): void {\n        cc.log('热更新检查回调 Code: ' + event.getEventCode());\n        switch (event.getEventCode()) {\n            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:\n                // 没有找到本地清单文件，热更新跳过\n                this.hotUpdatePanel.setInfo(\n                    '没有找到本地清单文件，热更新跳过...'\n                );\n                break;\n            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:\n                // 下载清单文件失败，热更新跳过\n                this.hotUpdatePanel.setInfo('下载清单文件失败，热更新跳过...');\n                break;\n            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:\n                // 解析清单文件失败，热更新跳过\n                this.hotUpdatePanel.setInfo('解析清单文件失败，热更新跳过...');\n                break;\n            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:\n                // 已经是最新版本，热更新跳过\n                this.hotUpdatePanel.setInfo('已经是最新版本，热更新跳过...');\n                break;\n            case jsb.EventAssetsManager.NEW_VERSION_FOUND:\n                // 发现新版本，请尝试更新\n                this.hotUpdatePanel.setInfo(\n                    '发现新版本，请尝试更新... (总字节数: ' +\n                        this._am.getTotalBytes() +\n                        'bytes)'\n                );\n                // 设置检查按钮为不可用\n                this.hotUpdatePanel.setCheckBtnActive(false);\n                // 设置文件进度为0\n                this.hotUpdatePanel.setFileProgress(0);\n                // 设置字节进度为0\n                this.hotUpdatePanel.setByteProgress(0);\n                break;\n            default:\n                return;\n        }\n        // 设置事件回调为空\n        this._am.setEventCallback(null);\n        // 设置正在更新状态为false\n        this._updating = false;\n    }\n\n    /**\n     * 检查更新\n     */\n    public checkUpdate(): void {\n        if (this._updating) {\n            this.hotUpdatePanel.setInfo('正在检查或更新...');\n            return;\n        }\n        // 如果资源管理器未初始化，则加载本地清单\n        if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {\n            // 解析md5 url\n            let url = this.manifestUrl.nativeUrl;\n            if (cc.loader.md5Pipe) {\n                // 使用md5管道转换url\n                url = cc.loader.md5Pipe.transformURL(url);\n            }\n            // 加载本地清单\n            this._am.loadLocalManifest(url);\n        }\n        // 如果本地清单未加载或未加载完成，则返回\n        if (\n            !this._am.getLocalManifest() ||\n            !this._am.getLocalManifest().isLoaded()\n        ) {\n            this.hotUpdatePanel.setInfo('加载本地清单失败...');\n            return;\n        }\n        // 设置事件回调\n        this._am.setEventCallback(this.checkCb.bind(this));\n        // 开始检查更新\n        this._am.checkUpdate();\n        // 设置正在更新状态为true\n        this._updating = true;\n    }\n\n    private updateCb(event: jsb.EventAssetsManager): void {\n        var needRestart = false;\n        var failed = false;\n        switch (event.getEventCode()) {\n            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:\n                this.hotUpdatePanel.setInfo(\n                    '没有找到本地清单文件，热更新跳过...'\n                );\n                failed = true;\n                break;\n            case jsb.EventAssetsManager.UPDATE_PROGRESSION:\n                // 设置字节进度\n                this.hotUpdatePanel.setByteProgress(event.getPercent());\n                // 设置文件进度\n                this.hotUpdatePanel.setFileProgress(event.getPercentByFile());\n                // 设置文件标签: 已下载文件数 / 总文件数\n                this.hotUpdatePanel.setFileLabel(\n                    event.getDownloadedFiles() + ' / ' + event.getTotalFiles()\n                );\n                // 设置字节标签: 已下载字节数 / 总字节数\n                this.hotUpdatePanel.setByteLabel(\n                    event.getDownloadedBytes() + ' / ' + event.getTotalBytes()\n                );\n                // 设置信息: 更新文件\n                var msg = event.getMessage();\n                if (msg) {\n                    this.hotUpdatePanel.setInfo('Updated file: ' + msg);\n                }\n                break;\n            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:\n            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:\n                // 下载、解析清单文件失败，热更新跳过\n                this.hotUpdatePanel.setInfo(\n                    '下载、解析清单文件失败，热更新跳过...'\n                );\n                failed = true;\n                break;\n            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:\n                // 已经是最新版本，热更新跳过\n                this.hotUpdatePanel.setInfo('已经是最新版本，热更新跳过...');\n                failed = true;\n                break;\n            case jsb.EventAssetsManager.UPDATE_FINISHED:\n                // 更新完成\n                this.hotUpdatePanel.setInfo(\n                    '更新完成... ' + event.getMessage()\n                );\n                // 设置需要重启为true\n                needRestart = true;\n                break;\n            case jsb.EventAssetsManager.UPDATE_FAILED:\n                // 更新失败\n                this.hotUpdatePanel.setInfo(\n                    '更新失败... ' + event.getMessage()\n                );\n                // 设置重试按钮为可用\n                this.hotUpdatePanel.setRetryBtnActive(true);\n                // 设置正在更新状态为false\n                this._updating = false;\n                // 设置可以重试为true\n                this._canRetry = true;\n                break;\n            case jsb.EventAssetsManager.ERROR_UPDATING:\n                // 资源更新错误\n                this.hotUpdatePanel.setInfo(\n                    '资源更新错误: ' +\n                        event.getAssetId() +\n                        ', ' +\n                        event.getMessage()\n                );\n                break;\n            case jsb.EventAssetsManager.ERROR_DECOMPRESS:\n                // 解压错误\n                this.hotUpdatePanel.setInfo('解压错误: ' + event.getMessage());\n                break;\n            default:\n                break;\n        }\n\n        if (failed) {\n            // 设置事件回调为空\n            this._am.setEventCallback(null);\n            this._updating = false;\n        }\n\n        // 如果需要重启，则重启游戏\n        if (needRestart) {\n            // 设置事件回调为空\n            this._am.setEventCallback(null);\n            // 获取搜索路径\n            var searchPaths = jsb.fileUtils.getSearchPaths();\n            //它返回的是一个数组，数组中第一个元素永远是 storagePath，然后才是 manifest 中的 searchPaths 列表（都会跟 storagePath 拼接）\n            var newPaths = this._am.getLocalManifest().getSearchPaths();\n            // 将新的搜索路径添加到搜索路径列表中\n            for (var i = 0; i < newPaths.length; i++) {\n                if (searchPaths.indexOf(newPaths[i]) == -1) {\n                    Array.prototype.unshift.apply(searchPaths, [newPaths[i]]);\n                }\n            }\n            // 将搜索路径列表保存到本地存储\n            // This value will be retrieved and appended to the default search path during game startup,\n            // please refer to samples/js-tests/main.js for detailed usage.\n            // !!! Re-add the search paths in main.js is very important, otherwise, new scripts won't take effect.\n            cc.sys.localStorage.setItem(\n                'HotUpdateSearchPaths',\n                JSON.stringify(searchPaths)\n            );\n            // 设置搜索路径\n            jsb.fileUtils.setSearchPaths(searchPaths);\n            // 停止所有音频\n            cc.audioEngine.stopAll();\n            // 重启游戏\n            cc.game.restart();\n        }\n    }\n\n    /**\n     * 热更新\n     */\n    public hotUpdate(): void {\n        if (this._am && !this._updating) {\n            // 设置事件回调\n            this._am.setEventCallback(this.updateCb.bind(this));\n            // 如果资源管理器未初始化，则加载本地清单\n            if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {\n                // Resolve md5 url\n                var url = this.manifestUrl.nativeUrl;\n                if (cc.loader.md5Pipe) {\n                    // 使用md5管道转换url\n                    url = cc.loader.md5Pipe.transformURL(url);\n                }\n                // 加载本地清单\n                this._am.loadLocalManifest(url);\n            }\n\n            // 重置失败次数\n            this._failCount = 0;\n            // 开始更新\n            this._am.update();\n            // 设置更新按钮为不可用\n            this.hotUpdatePanel.setUpdateBtnActive(false);\n            // 设置正在更新状态为true\n            this._updating = true;\n        }\n    }\n\n    public retry(): void {\n        if (!this._updating && this._canRetry) {\n            this.hotUpdatePanel.setRetryBtnActive(false);\n            this._canRetry = false;\n            // 设置信息: 重试失败资源下载\n            this.hotUpdatePanel.setInfo('重试失败资源下载...');\n            this._am.downloadFailedAssets();\n        }\n    }\n\n    public showUpdateUI(): void {\n        this.hotUpdatePanel.node.active = true;\n    }\n\n    protected onDestroy(): void {\n        this._am && this._am.setEventCallback(null);\n    }\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class HotUpdatePanel extends cc.Component {\n    @property(cc.Label)\n    infoLabel: cc.Label = null;\n\n    @property(cc.Label)\n    fileLabel: cc.Label = null;\n\n    @property(cc.Label)\n    byteLabel: cc.Label = null;\n\n    @property(cc.Node)\n    checkBtn: cc.Node = null;\n\n    @property(cc.Node)\n    updateBtn: cc.Node = null;\n\n    @property(cc.Node)\n    retryBtn: cc.Node = null;\n\n    _fileProgress: number = 0;\n    _byteProgress: number = 0;\n    protected onLoad(): void {\n        this.retryBtn.active = false;\n    }\n\n    public setInfo(info: string): void {\n        this.infoLabel.string = info;\n    }\n\n    public setFileProgress(progress: number): void {\n        this._fileProgress = progress;\n    }\n\n    public setByteProgress(progress: number): void {\n        this._byteProgress = progress;\n    }\n\n    public setCheckBtnActive(active: boolean): void {\n        this.checkBtn.active = active;\n    }\n\n    public setRetryBtnActive(active: boolean): void {\n        this.retryBtn.active = active;\n    }\n\n    public setUpdateBtnActive(active: boolean): void {\n        this.updateBtn.active = active;\n    }\n\n    public setFileLabel(label: string): void {\n        this.fileLabel.string = label;\n    }\n\n    public setByteLabel(label: string): void {\n        this.byteLabel.string = label;\n    }\n\n    public close(): void {\n        this.node.active = false;\n    }\n}\n","import { LevelConfig } from '../gamePlay/GameTypes';\r\n\r\nconst { ccclass, property, requireComponent } = cc._decorator;\r\n\r\n@ccclass\r\n@requireComponent(cc.Button)\r\nexport default class LevelBtn extends cc.Component {\r\n    @property(cc.JsonAsset)\r\n    levelInfo: cc.JsonAsset = null;\r\n\r\n    // protected onLoad(): void {\r\n    //     this.node.on('click', this.onClick, this);\r\n    // }\r\n\r\n    // public onClick(): void {\r\n    //     const levelInfo: LevelConfig = this.levelInfo.json;\r\n    //     this.node.emit(EntryLevelEvent, levelInfo);\r\n    // }\r\n\r\n    // protected onDestroy(): void {\r\n    //     this.node.off('click', this.onClick, this);\r\n    // }\r\n\r\n    public getLevelInfo(): LevelConfig {\r\n        return this.levelInfo.json;\r\n    }\r\n\r\n    public setBtnActive(active: boolean): void {\r\n        const btn = this.getComponent(cc.Button);\r\n        btn.interactable = active;\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport AudioMgr from '../AudioMgr';\r\nimport GameMgr from '../gamePlay/GameMgr';\r\nimport { LevelConfig } from '../gamePlay/GameTypes';\r\nimport LevelBtn from './LevelBtn';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class LevelSelect extends cc.Component {\r\n    @property(AudioMgr)\r\n    audioMgr: AudioMgr = null;\r\n\r\n    protected start(): void {\r\n        this.audioMgr.playMusic();\r\n    }\r\n\r\n    public onEntryLevel(event: cc.Event.EventTouch): void {\r\n        const target = event.target as cc.Node;\r\n        const levelBtn = target.getComponent(LevelBtn);\r\n        if (!levelBtn) {\r\n            return;\r\n        }\r\n        const levelConfig = levelBtn.getLevelInfo();\r\n        this.runGame(levelConfig);\r\n    }\r\n\r\n    public runGame(levelConfig: LevelConfig): void {\r\n        const onLaunched = (err, scene: cc.Scene) => {\r\n            if (err) {\r\n                console.error(err);\r\n            } else {\r\n                const gameMgr = scene.getComponentInChildren(GameMgr);\r\n                gameMgr.initGamePanel(levelConfig);\r\n            }\r\n        };\r\n        cc.director.loadScene('Game', onLaunched);\r\n    }\r\n\r\n    public backToMenu(): void {\r\n        // 返回主菜单\r\n        cc.director.loadScene('Menu');\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        this.audioMgr.stopMusic();\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport { EntryLevelEvent, UserSaveDataName } from '../const';\r\nimport { LevelConfig, UserLevelInfo } from '../gamePlay/GameTypes';\r\nimport { getLocalData, HasLocalData, setLocalData } from '../Utils';\r\nimport LevelBtn from './LevelBtn';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class LevelView extends cc.Component {\r\n    protected onLoad(): void {\r\n        this.node.on(EntryLevelEvent, this.onEntryLevel, this);\r\n        const hasSaveData = HasLocalData(UserSaveDataName);\r\n        if (!hasSaveData) {\r\n            setLocalData(UserSaveDataName, { maxLevelId: 0 });\r\n        }\r\n    }\r\n\r\n    protected start(): void {\r\n        this.adjustLevelBtns();\r\n    }\r\n\r\n    public onEntryLevel(levelInfo: LevelConfig): void {\r\n        console.log(levelInfo);\r\n    }\r\n\r\n    protected adjustLevelBtns(): void {\r\n        const levelBtns = this.getAllLevelBtns();\r\n        const userLevelInfo = getLocalData<UserLevelInfo>(UserSaveDataName);\r\n        const maxLevelId = userLevelInfo.maxLevelId;\r\n        levelBtns.forEach((levelBtn) => {\r\n            const levelInfo = levelBtn.getLevelInfo();\r\n            if (levelInfo.id <= maxLevelId + 1) {\r\n                levelBtn.setBtnActive(true);\r\n            } else {\r\n                levelBtn.setBtnActive(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    public getAllLevelBtns(): LevelBtn[] {\r\n        return this.node.getComponentsInChildren(LevelBtn);\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        this.node.off(EntryLevelEvent, this.onEntryLevel, this);\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport AudioMgr from \"./AudioMgr\";\r\nimport { UserSettingItemName } from \"./const\";\r\nimport GameSetting from \"./GameSetting\";\r\nimport {  HasLocalData, setLocalData } from \"./Utils\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Menu extends cc.Component {\r\n\r\n    @property(AudioMgr)\r\n    audioMgr: AudioMgr = null;\r\n\r\n    @property(GameSetting)\r\n    gameSetting: GameSetting = null;\r\n\r\n    protected onLoad(): void {\r\n        // 检查本地数据\r\n        const hasSettingData = HasLocalData(UserSettingItemName);\r\n        if(!hasSettingData){\r\n            setLocalData(UserSettingItemName, { bgmVolume: 1, effectVolume :1});\r\n        }\r\n    }\r\n\r\n    start(): void {\r\n        // 播放背景音乐\r\n        this.audioMgr.playMusic();\r\n    }\r\n\r\n    chooseLevel():void{\r\n        // 加载关卡选择场景\r\n        cc.director.loadScene('LevelSelect');\r\n    }\r\n\r\n    showSetting():void{\r\n        // 显示设置界面\r\n        this.gameSetting.node.active = true;\r\n    }\r\n\r\n    closeSetting():void{\r\n        // 关闭设置界面\r\n        this.gameSetting.node.active = false;\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        // 暂停背景音乐\r\n        this.audioMgr.stopMusic();\r\n    }\r\n}\r\n","import BaseBlock from './block/BaseBlock';\r\nimport Grid, { parseLocation } from './common/Grid';\r\nimport { getRandomBlockConfig, isLocationEqual } from './common/GameUtils';\r\nimport {\r\n    BlockConfig,\r\n    BlockDropInfo,\r\n    BlockSpecialType,\r\n    BlockType,\r\n    GameCheckInfo,\r\n    LevelConfig,\r\n    Location,\r\n} from './GameTypes';\r\nimport EffectMgr from './effects/EffectMgr';\r\nimport BlockMgr from './block/BlockMgr';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PlayPanel extends cc.Component {\r\n    @property(cc.Node)\r\n    gridRootNode: cc.Node = null;\r\n\r\n    @property({\r\n        displayName: '网格行数',\r\n        min: 1,\r\n        step: 1,\r\n    })\r\n    rowCount: number = 6;\r\n\r\n    @property({\r\n        displayName: '网格列数',\r\n        min: 1,\r\n        step: 1,\r\n    })\r\n    columnCount: number = 8;\r\n\r\n    @property({\r\n        displayName: '网格单位宽度',\r\n    })\r\n    cellWidth: number = 70;\r\n\r\n    @property({\r\n        displayName: '网格单位高度',\r\n    })\r\n    cellHeight: number = 70;\r\n\r\n    @property({\r\n        displayName: '网格单位间距',\r\n    })\r\n    cellSpacing: number = 2;\r\n\r\n    _grid: Grid<BaseBlock> = null;\r\n    _blockMgr: BlockMgr = null;\r\n    _effectMgr: EffectMgr = null;\r\n    _levelConfig: LevelConfig = null;\r\n    _blockParentMap: Map<BlockType, cc.Node> = new Map();\r\n\r\n    public initGamePanel(\r\n        levelConfig: LevelConfig,\r\n        blockMgr: BlockMgr,\r\n        effectMgr: EffectMgr\r\n    ): void {\r\n        this._blockMgr = blockMgr;\r\n        this._effectMgr = effectMgr;\r\n        this._levelConfig = levelConfig;\r\n        // 初始化网格数据\r\n        this.initGrid(levelConfig);\r\n        // 初始化方块\r\n        this.initBlocks();\r\n    }\r\n\r\n    protected initGrid(levelConfig: LevelConfig): void {\r\n        const { width, height } = levelConfig.gameMap;\r\n        this._grid = new Grid(\r\n            width,\r\n            height,\r\n            new cc.Size(this.cellWidth, this.cellHeight),\r\n            this.cellSpacing\r\n        );\r\n        this.gridRootNode.setContentSize(this._grid.getGridSize());\r\n        this.node.setContentSize(this._grid.getGridSize());\r\n    }\r\n\r\n    protected initBlocks(): void {\r\n        const blockInfos = this._levelConfig.gameMap.blocks;\r\n        const keys = Object.keys(blockInfos);\r\n        for (const key of keys) {\r\n            const { row, column } = parseLocation(key);\r\n            const blockConfig = blockInfos[key];\r\n            this.generateBlock({ row, column }, blockConfig);\r\n        }\r\n    }\r\n\r\n    public getBlockParent(blockType: BlockType): cc.Node {\r\n        let blockParent = this._blockParentMap.get(blockType);\r\n        if (!blockParent) {\r\n            blockParent = new cc.Node(`block_parent_${blockType}`);\r\n            this._blockParentMap.set(blockType, blockParent);\r\n            this.gridRootNode.addChild(blockParent);\r\n        }\r\n        return blockParent;\r\n    }\r\n\r\n    public getBlockByLocation(location: Location): BaseBlock {\r\n        if (this._grid.isInBounds(location)) {\r\n            return this._grid.getCell(location);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getBlockByPosition(position: cc.Vec2): BaseBlock {\r\n        const location = this._grid.getTouchedLocation(position);\r\n        return location ? this.getBlockByLocation(location) : null;\r\n    }\r\n\r\n    public getLocationByPosition(position: cc.Vec2): {\r\n        row: number;\r\n        column: number;\r\n    } {\r\n        return this._grid.getTouchedLocation(position);\r\n    }\r\n\r\n    // 获取相连的方块\r\n    public getContiguousBlocks(\r\n        location: Location,\r\n        mapInfo: Array<Array<BlockConfig>>,\r\n        excludeLocations: Array<Location>\r\n    ): Array<Location> {\r\n        if (\r\n            excludeLocations.some((excludeLocation) =>\r\n                isLocationEqual(excludeLocation, location)\r\n            )\r\n        ) {\r\n            return [];\r\n        }\r\n        const contiguousLocations: Array<Location> = [];\r\n        const queue: Array<Location> = [location];\r\n\r\n        const typeIsSame = (\r\n            location1: Location,\r\n            location2: Location\r\n        ): boolean => {\r\n            const config1 = mapInfo[location1.row][location1.column];\r\n            const config2 = mapInfo[location2.row][location2.column];\r\n            // 特殊炸弹方块不能与普通方块相连\r\n            return (\r\n                config1.type === config2.type &&\r\n                config1.special !== BlockSpecialType.SPECIAL_BOOM &&\r\n                config2.special !== BlockSpecialType.SPECIAL_BOOM\r\n            );\r\n        };\r\n\r\n        const hasContiguous = (location1: Location): boolean => {\r\n            return contiguousLocations.some((location2) =>\r\n                isLocationEqual(location1, location2)\r\n            );\r\n        };\r\n\r\n        const hasExclude = (location1: Location): boolean => {\r\n            return excludeLocations.some((excludeLocation) =>\r\n                isLocationEqual(location1, excludeLocation)\r\n            );\r\n        };\r\n\r\n        const inQueue = (location1: Location): boolean => {\r\n            return queue.some((location2) =>\r\n                isLocationEqual(location1, location2)\r\n            );\r\n        };\r\n\r\n        // 获取相邻的连续方块\r\n        while (queue.length > 0) {\r\n            const currentLocation = queue.shift();\r\n            contiguousLocations.push(currentLocation);\r\n            const neighborsLocations =\r\n                this._grid.getNeighborsLocations(currentLocation);\r\n            for (const neighborLocation of neighborsLocations) {\r\n                if (\r\n                    typeIsSame(currentLocation, neighborLocation) &&\r\n                    !hasContiguous(neighborLocation) &&\r\n                    !hasExclude(neighborLocation) &&\r\n                    !inQueue(neighborLocation)\r\n                ) {\r\n                    // 如果相邻方块类型相同，且未被访问过，且未在队列中，则加入队列\r\n                    queue.push(neighborLocation);\r\n                }\r\n            }\r\n        }\r\n        const rowList = contiguousLocations.map((location) => location.row);\r\n        const columnList = contiguousLocations.map(\r\n            (location) => location.column\r\n        );\r\n        const rowSet = new Set(rowList);\r\n        const columnSet = new Set(columnList);\r\n        // 有效的连续方块\r\n        const validContiguousLocations: Array<Location> = [];\r\n        // 按行分类,同一行内不满三个的方块，需要排除\r\n        rowSet.forEach((row) => {\r\n            const rowLocations = contiguousLocations.filter(\r\n                (location) => location.row === row\r\n            );\r\n            // 按列从小到大排序\r\n            rowLocations.sort((a, b) => a.column - b.column);\r\n            // 只保留相连的位置，且至少三个\r\n            let linkedValidRowLocations: Array<Location> = [rowLocations[0]];\r\n            for (let i = 1; i < rowLocations.length; i++) {\r\n                const location = rowLocations[i];\r\n                if (location.column - rowLocations[i - 1].column === 1) {\r\n                    // 相连，则加入连续方块列表\r\n                    linkedValidRowLocations.push(location);\r\n                } else {\r\n                    // 不相连，则清空连续方块列表\r\n                    if (linkedValidRowLocations.length >= 3) {\r\n                        validContiguousLocations.push(\r\n                            ...linkedValidRowLocations\r\n                        );\r\n                    }\r\n                    linkedValidRowLocations = [];\r\n                }\r\n            }\r\n            if (linkedValidRowLocations.length >= 3) {\r\n                validContiguousLocations.push(...linkedValidRowLocations);\r\n            }\r\n            // if (rowLocations.length >= 3) {\r\n            //     validContiguousLocations.push(...rowLocations);\r\n            // }\r\n        });\r\n        // 按列分类,同一列内不满三个的方块，需要排除\r\n        columnSet.forEach((column) => {\r\n            const columnLocations = contiguousLocations.filter(\r\n                (location) => location.column === column\r\n            );\r\n            // 按行从小到大排序\r\n            columnLocations.sort((a, b) => a.row - b.row);\r\n            // 只保留相连的位置，且至少三个\r\n            let linkedValidColumnLocations: Array<Location> = [\r\n                columnLocations[0],\r\n            ];\r\n            for (let i = 1; i < columnLocations.length; i++) {\r\n                const location = columnLocations[i];\r\n                if (location.row - columnLocations[i - 1].row === 1) {\r\n                    linkedValidColumnLocations.push(location);\r\n                } else {\r\n                    if (linkedValidColumnLocations.length >= 3) {\r\n                        validContiguousLocations.push(\r\n                            ...linkedValidColumnLocations\r\n                        );\r\n                    }\r\n                    linkedValidColumnLocations = [];\r\n                }\r\n            }\r\n            if (linkedValidColumnLocations.length >= 3) {\r\n                validContiguousLocations.push(...linkedValidColumnLocations);\r\n            }\r\n            // if (columnLocations.length >= 3) {\r\n            //     validContiguousLocations.push(...columnLocations);\r\n            // }\r\n        });\r\n\r\n        // 去重\r\n        return [...new Set(validContiguousLocations)];\r\n    }\r\n\r\n    public eliminateBlocks(gameCheckInfo: GameCheckInfo, cd: () => void): void {\r\n        const { swapBlocks } = gameCheckInfo;\r\n        // 交换方块, 并消除方块\r\n        if (swapBlocks) {\r\n            const [location1, location2] = swapBlocks;\r\n            const block1 = this.getBlockByLocation(location1);\r\n            const block2 = this.getBlockByLocation(location2);\r\n            this.swapBlocks(block1, block2, location1, location2, () => {\r\n                // 消除方块\r\n                this.eliminateHandler(gameCheckInfo, cd);\r\n            });\r\n        } else {\r\n            // 没有交换方块，直接消除方块\r\n            this.eliminateHandler(gameCheckInfo, cd);\r\n        }\r\n    }\r\n\r\n    protected eliminateHandler(\r\n        gameCheckInfo: GameCheckInfo,\r\n        cd: () => void\r\n    ): void {\r\n        // 消除方块\r\n        const { canEliminateCheckInfos } = gameCheckInfo;\r\n        for (const eliminateCheckInfo of canEliminateCheckInfos) {\r\n            const { contiguousLocations } = eliminateCheckInfo;\r\n            for (const location of contiguousLocations) {\r\n                const block = this.getBlockByLocation(location);\r\n                this.putBlock(block, location);\r\n            }\r\n        }\r\n        // 释放特效\r\n        this._effectMgr.effectHandler(this._grid, gameCheckInfo, cd);\r\n        // cd && cd();\r\n    }\r\n\r\n    public putBlock(block: BaseBlock, location: Location): void {\r\n        // 网格数据清除\r\n        this._grid.setCell(location, null);\r\n        // 将方块放回方块池\r\n        this._blockMgr.putBlock(block);\r\n    }\r\n\r\n    public swapBlocks(\r\n        block1: BaseBlock,\r\n        block2: BaseBlock,\r\n        location1: Location,\r\n        location2: Location,\r\n        cd: () => void\r\n    ): void {\r\n        // 交换\r\n        this._grid.setCell(location1, block2);\r\n        this._grid.setCell(location2, block1);\r\n\r\n        const pos1 = this._grid.getCellPosition(location1);\r\n        const pos2 = this._grid.getCellPosition(location2);\r\n\r\n        let step = 0;\r\n        const actionCd = () => {\r\n            step++;\r\n            if (step === 2) {\r\n                cd();\r\n            }\r\n        };\r\n\r\n        const nodeActionSeq1 = cc.sequence(\r\n            cc.moveTo(0.3, pos2),\r\n            cc.callFunc(actionCd)\r\n        );\r\n\r\n        const nodeActionSeq2 = cc.sequence(\r\n            cc.moveTo(0.3, pos1),\r\n            cc.callFunc(actionCd)\r\n        );\r\n        // 交换、还原动画\r\n        block1.node.runAction(nodeActionSeq1);\r\n        block2.node.runAction(nodeActionSeq2);\r\n    }\r\n\r\n    public swapAndBackBlocks(\r\n        location1: Location,\r\n        location2: Location,\r\n        cd: () => void\r\n    ): void {\r\n        // 获取方块\r\n        const block1 = this.getBlockByLocation(location1);\r\n        const block2 = this.getBlockByLocation(location2);\r\n        // 只交换位置，不交换方块\r\n        const pos1 = this._grid.getCellPosition(location1);\r\n        const pos2 = this._grid.getCellPosition(location2);\r\n\r\n        let step = 0;\r\n        const actionCd = () => {\r\n            step++;\r\n            if (step === 2) {\r\n                cd();\r\n            }\r\n        };\r\n\r\n        // 交换、还原动画\r\n        cc.tween(block1.node)\r\n            .sequence(\r\n                cc.moveTo(0.3, pos2),\r\n                cc.moveTo(0.3, pos1),\r\n                cc.callFunc(actionCd)\r\n            )\r\n            .start();\r\n        cc.tween(block2.node)\r\n            .sequence(\r\n                cc.moveTo(0.3, pos1),\r\n                cc.moveTo(0.3, pos2),\r\n                cc.callFunc(actionCd)\r\n            )\r\n            .start();\r\n    }\r\n\r\n    public dropRandomBlocks(cd: (entryList: Array<Location>) => void): void {\r\n        // 根据含有空位的列生成随机方块\r\n        const emptyList: Record<string, Array<Location>> = {};\r\n        const data = this._grid.getData();\r\n        for (let row = 0; row < data.length; row++) {\r\n            const rowData = data[row];\r\n            for (let column = 0; column < rowData.length; column++) {\r\n                const cell = rowData[column];\r\n                if (cell === null) {\r\n                    if (!emptyList[column]) {\r\n                        emptyList[column] = [];\r\n                    }\r\n                    emptyList[column].push({ row, column });\r\n                }\r\n            }\r\n        }\r\n        const entryList: Array<Location> = [];\r\n        // 先将悬空的方块向下掉落，再补位\r\n        const blockDropInfos: Array<BlockDropInfo> = [];\r\n        for (const columnKey in emptyList) {\r\n            const column = Number(columnKey);\r\n            const columnList = emptyList[column];\r\n            // 空位的最高行\r\n            // const maxRow = columnList[columnList.length - 1].row;\r\n            let startDropRow = columnList[0].row;\r\n            // 先掉落存在的方块\r\n            for (let row = startDropRow + 1; row < data.length; row++) {\r\n                const cell = data[row][column];\r\n                if (!cell) {\r\n                    continue;\r\n                }\r\n                const targetLocation = {\r\n                    row: startDropRow++,\r\n                    column: column,\r\n                };\r\n                // 添加到入口列表\r\n                entryList.push(targetLocation);\r\n                // 有方块，则将方块掉落到目标位置\r\n                blockDropInfos.push({\r\n                    location: { row, column },\r\n                    block: cell,\r\n                    dropTime: 0.3,\r\n                    targetDropLocation: targetLocation,\r\n                });\r\n                // 清除原位置\r\n                this._grid.setCell({ row, column }, null);\r\n                // 放置新位置\r\n                this._grid.setCell(targetLocation, cell);\r\n            }\r\n            let startGenerateRow = data.length;\r\n            // 再生成空位需要的方块\r\n            for (\r\n                let row = startGenerateRow;\r\n                row < startGenerateRow + columnList.length;\r\n                row++\r\n            ) {\r\n                const targetLocation = {\r\n                    row: startDropRow++,\r\n                    column: column,\r\n                };\r\n                // 添加到入口列表\r\n                entryList.push(targetLocation);\r\n                // 生成随机方块\r\n                const randomBlockConfig = getRandomBlockConfig();\r\n                const block = this.generateBlock(\r\n                    targetLocation,\r\n                    randomBlockConfig,\r\n                    this._grid.getCellPosition({\r\n                        row,\r\n                        column,\r\n                    })\r\n                );\r\n                // 记录\r\n                blockDropInfos.push({\r\n                    location: targetLocation,\r\n                    block,\r\n                    dropTime: 0.3,\r\n                    targetDropLocation: targetLocation,\r\n                });\r\n            }\r\n        }\r\n        // 方块掉落动画\r\n        let step = 0;\r\n        const actionCd = () => {\r\n            step++;\r\n            if (step === blockDropInfos.length) {\r\n                cd(entryList);\r\n            }\r\n        };\r\n        for (const blockDropInfo of blockDropInfos) {\r\n            const { block, dropTime, targetDropLocation } = blockDropInfo;\r\n            const targetPos = this._grid.getCellPosition(targetDropLocation);\r\n            cc.tween(block.node)\r\n                .sequence(cc.moveTo(dropTime, targetPos), cc.callFunc(actionCd))\r\n                .start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生成新特殊方块\r\n     * @param gameCheckInfo 游戏检查信息\r\n     */\r\n    public generateNewSpecialBlocks(gameCheckInfo: GameCheckInfo): void {\r\n        const { newSpecailBlocks } = gameCheckInfo;\r\n        const keys = Object.keys(newSpecailBlocks);\r\n        for (const key of keys) {\r\n            const location = parseLocation(key);\r\n            const isEmpty = this._grid.getCell(location) === null;\r\n            if (isEmpty) {\r\n                const blockConfig = newSpecailBlocks[key];\r\n                this.generateBlock(location, blockConfig);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生成方块\r\n     * @param location 位置\r\n     * @param blockConfig 方块配置\r\n     * @returns 方块\r\n     */\r\n    public generateBlock(\r\n        location: Location,\r\n        blockConfig: BlockConfig,\r\n        initPos?: cc.Vec2\r\n    ): BaseBlock {\r\n        const blockParent = this.getBlockParent(blockConfig.type);\r\n        const block = this._blockMgr.getBlock(blockConfig, blockParent);\r\n        this._grid.setCell(location, block);\r\n        block.node.setPosition(initPos || this._grid.getCellPosition(location));\r\n        return block;\r\n    }\r\n\r\n    // 获取方块地图信息\r\n    public getBlockMapInfo(): Array<Array<BlockConfig>> {\r\n        return this._grid\r\n            .getData()\r\n            .map((row) => row.map((block) => block && block.getConfig()));\r\n    }\r\n\r\n    public isInBounds(location: Location): boolean {\r\n        return this._grid.isInBounds(location);\r\n    }\r\n\r\n    public getLevelConfig(): LevelConfig {\r\n        return this._levelConfig;\r\n    }\r\n\r\n    public getAllBlock(): Array<BaseBlock> {\r\n        const blockList = this.gridRootNode.getComponentsInChildren(BaseBlock);\r\n        return blockList;\r\n    }\r\n}\r\n","const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass('SpineProperty')\r\nexport default class SpineProperty{\r\n    @property({\r\n        type: sp.SkeletonData,\r\n        \r\n    })\r\n    skeletonData: sp.SkeletonData = null;\r\n\r\n    @property()\r\n    animation: string = '';\r\n\r\n    @property()\r\n    isLoop: boolean = true;\r\n}\r\n","export const DefaultAnimationsEnum = cc.Enum({ '<None>': 0 });\r\n\r\ntype EnumAttr = { component: cc.Component; propName: string; enumDef: any };\r\n\r\nfunction setEnumAttr(obj: cc.Component, propName: string, enumDef: any): void {\r\n    if (!CC_EDITOR) {\r\n        return;\r\n    }\r\n\r\n    (cc.Class as any).attr(obj, propName, {\r\n        type: 'Enum',\r\n        enumList: (cc.Enum as any).getList(enumDef)\r\n    });\r\n}\r\n\r\nfunction refreshEditor(enumArray: EnumAttr[], node: cc.Node): void {\r\n    if (!CC_EDITOR) {\r\n        return;\r\n    }\r\n\r\n    for (const { component, propName, enumDef } of enumArray) {\r\n        setEnumAttr(component, propName, enumDef);\r\n    }\r\n\r\n    (global as any).Editor.Utils.refreshSelectedInspector('node', node.uuid);\r\n}\r\n\r\n\r\nexport function updateAnimationEnum(\r\n    spineComp: sp.Skeleton,\r\n    context: cc.Component,\r\n    propName: string\r\n): void {\r\n    if (!CC_EDITOR) {\r\n        return;\r\n    }\r\n\r\n    let animEnum = DefaultAnimationsEnum;\r\n    const { skeletonData } = (spineComp || Object.create(null)) as any;\r\n    if (skeletonData) {\r\n        animEnum = skeletonData.getAnimsEnum();\r\n    }\r\n\r\n    refreshEditor(\r\n        [{ component: context, propName, enumDef: animEnum }],\r\n        context.node\r\n    );\r\n}","import { Direction, TOUCH_BLOCK_EVENT } from './GameConst';\r\nimport { getDirection } from './common/GameUtils';\r\nimport PlayPanel from './PlayPanel';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\nexport enum TouchDetailEventType {\r\n    click,\r\n    drag,\r\n}\r\n\r\nexport interface TouchDetailEvent {\r\n    type: TouchDetailEventType;\r\n    location: { row: number; column: number };\r\n    direction?: Direction;\r\n}\r\n\r\n@ccclass\r\nexport default class TouchHandler extends cc.Component {\r\n    @property(cc.Node)\r\n    protected target: cc.Node = null;\r\n\r\n    @property(PlayPanel)\r\n    playPanel: PlayPanel = null;\r\n\r\n    _isEnabled: boolean = true;\r\n    _isDragging: boolean = false;\r\n    _hasEmitEvent: boolean = false;\r\n    _startPos: cc.Vec2 = null;\r\n\r\n    protected onLoad(): void {\r\n        this.initTouchEvents();\r\n    }\r\n\r\n    protected initTouchEvents(): void {\r\n        this.target.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.target.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        this.target.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n    }\r\n\r\n    protected onTouchStart(e: cc.Event.EventTouch): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        this._isDragging = false;\r\n        this._hasEmitEvent = false;\r\n        const pos = this.target.convertToNodeSpaceAR(e.getLocation());\r\n        this._startPos = pos;\r\n    }\r\n\r\n    protected onTouchMove(e: cc.Event.EventTouch): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        const pos = this.target.convertToNodeSpaceAR(e.getLocation());\r\n        const delta = pos.sub(this._startPos);\r\n        const direction = this.getDirection(delta);\r\n\r\n        if (direction === Direction.NONE) {\r\n            // 如果方向为NONE，则不发送事件\r\n            return;\r\n        }\r\n        this._isDragging = true;\r\n        // const block = this.playPanel.getBlockByPosition(pos);\r\n        const location = this.playPanel.getLocationByPosition(pos);\r\n        // 发送拖动事件\r\n        if (!this._hasEmitEvent) {\r\n            this.node.emit(TOUCH_BLOCK_EVENT, {\r\n                type: TouchDetailEventType.drag,\r\n                location,\r\n                direction,\r\n            });\r\n            this._hasEmitEvent = true;\r\n        }\r\n    }\r\n\r\n    protected onTouchEnd(e: cc.Event.EventTouch): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n        if (!this._isDragging && !this._hasEmitEvent) {\r\n            const pos = this.target.convertToNodeSpaceAR(e.getLocation());\r\n            const location = this.playPanel.getLocationByPosition(pos);\r\n            // 如果未拖动，则发送点击事件\r\n            this.node.emit(TOUCH_BLOCK_EVENT, {\r\n                type: TouchDetailEventType.click,\r\n                location: location,\r\n            });\r\n            this._hasEmitEvent = true;\r\n        }\r\n        this._isDragging = false;\r\n        this._startPos = null;\r\n    }\r\n\r\n    protected getDirection(delta: cc.Vec2, threshold: number = 10): Direction {\r\n        const absDelta = delta.mag();\r\n        if (absDelta < threshold) {\r\n            return Direction.NONE;\r\n        }\r\n        return getDirection(delta);\r\n    }\r\n\r\n    public setEnabled(enabled: boolean): void {\r\n        this._isEnabled = enabled;\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        this.target.off(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.target.off(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        this.target.off(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n    }\r\n}\r\n","export function HasLocalData(name: string): boolean {\r\n    const str = cc.sys.localStorage.getItem(name);\r\n    return str && str !== '[object Object]';\r\n}\r\n\r\nexport function getLocalData<T>(name: string): T {\r\n    const str = cc.sys.localStorage.getItem(name);\r\n    return JSON.parse(str);\r\n}\r\n\r\nexport function setLocalData(name: string, obj: Object): void {\r\n    cc.sys.localStorage.setItem(name, JSON.stringify(obj));\r\n}\r\n","export const UserSettingItemName = 'UserSetting';\r\nexport const UserSaveDataName = 'UserSaveData';\r\nexport const EntryLevelEvent = 'EntryLevelEvent';\r\n"],"file":"index.js"}