{"version":3,"sources":["assets\\Script\\gamePlay\\PlayPanel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import BaseBlock from './block/BaseBlock';\r\nimport Grid, { parseLocation } from './common/Grid';\r\nimport { getRandomBlockConfig, isLocationEqual } from './common/GameUtils';\r\nimport {\r\n    BlockConfig,\r\n    BlockDropInfo,\r\n    BlockSpecialType,\r\n    BlockType,\r\n    GameCheckInfo,\r\n    LevelConfig,\r\n    Location,\r\n} from './GameTypes';\r\nimport EffectMgr from './effects/EffectMgr';\r\nimport BlockMgr from './block/BlockMgr';\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PlayPanel extends cc.Component {\r\n    @property(cc.Node)\r\n    gridRootNode: cc.Node = null;\r\n\r\n    @property({\r\n        displayName: '网格行数',\r\n        min: 1,\r\n        step: 1,\r\n    })\r\n    rowCount: number = 6;\r\n\r\n    @property({\r\n        displayName: '网格列数',\r\n        min: 1,\r\n        step: 1,\r\n    })\r\n    columnCount: number = 8;\r\n\r\n    @property({\r\n        displayName: '网格单位宽度',\r\n    })\r\n    cellWidth: number = 70;\r\n\r\n    @property({\r\n        displayName: '网格单位高度',\r\n    })\r\n    cellHeight: number = 70;\r\n\r\n    @property({\r\n        displayName: '网格单位间距',\r\n    })\r\n    cellSpacing: number = 2;\r\n\r\n    _grid: Grid<BaseBlock> = null;\r\n    _blockMgr: BlockMgr = null;\r\n    _effectMgr: EffectMgr = null;\r\n    _levelConfig: LevelConfig = null;\r\n    _blockParentMap: Map<BlockType, cc.Node> = new Map();\r\n\r\n    public initGamePanel(\r\n        levelConfig: LevelConfig,\r\n        blockMgr: BlockMgr,\r\n        effectMgr: EffectMgr\r\n    ): void {\r\n        this._blockMgr = blockMgr;\r\n        this._effectMgr = effectMgr;\r\n        this._levelConfig = levelConfig;\r\n        // 初始化网格数据\r\n        this.initGrid(levelConfig);\r\n        // 初始化方块\r\n        this.initBlocks();\r\n    }\r\n\r\n    protected initGrid(levelConfig: LevelConfig): void {\r\n        const { width, height } = levelConfig.gameMap;\r\n        this._grid = new Grid(\r\n            width,\r\n            height,\r\n            new cc.Size(this.cellWidth, this.cellHeight),\r\n            this.cellSpacing\r\n        );\r\n        this.gridRootNode.setContentSize(this._grid.getGridSize());\r\n        this.node.setContentSize(this._grid.getGridSize());\r\n    }\r\n\r\n    protected initBlocks(): void {\r\n        const blockInfos = this._levelConfig.gameMap.blocks;\r\n        const keys = Object.keys(blockInfos);\r\n        for (const key of keys) {\r\n            const { row, column } = parseLocation(key);\r\n            const blockConfig = blockInfos[key];\r\n            this.generateBlock({ row, column }, blockConfig);\r\n        }\r\n    }\r\n\r\n    public getBlockParent(blockType: BlockType): cc.Node {\r\n        let blockParent = this._blockParentMap.get(blockType);\r\n        if (!blockParent) {\r\n            blockParent = new cc.Node(`block_parent_${blockType}`);\r\n            this._blockParentMap.set(blockType, blockParent);\r\n            this.gridRootNode.addChild(blockParent);\r\n        }\r\n        return blockParent;\r\n    }\r\n\r\n    public getBlockByLocation(location: Location): BaseBlock {\r\n        if (this._grid.isInBounds(location)) {\r\n            return this._grid.getCell(location);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getBlockByPosition(position: cc.Vec2): BaseBlock {\r\n        const location = this._grid.getTouchedLocation(position);\r\n        return location ? this.getBlockByLocation(location) : null;\r\n    }\r\n\r\n    public getLocationByPosition(position: cc.Vec2): {\r\n        row: number;\r\n        column: number;\r\n    } {\r\n        return this._grid.getTouchedLocation(position);\r\n    }\r\n\r\n    // 获取相连的方块\r\n    public getContiguousBlocks(\r\n        location: Location,\r\n        mapInfo: Array<Array<BlockConfig>>,\r\n        excludeLocations: Array<Location>\r\n    ): Array<Location> {\r\n        if (\r\n            excludeLocations.some((excludeLocation) =>\r\n                isLocationEqual(excludeLocation, location)\r\n            )\r\n        ) {\r\n            return [];\r\n        }\r\n        const contiguousLocations: Array<Location> = [];\r\n        const queue: Array<Location> = [location];\r\n\r\n        const typeIsSame = (\r\n            location1: Location,\r\n            location2: Location\r\n        ): boolean => {\r\n            const config1 = mapInfo[location1.row][location1.column];\r\n            const config2 = mapInfo[location2.row][location2.column];\r\n            // 特殊炸弹方块不能与普通方块相连\r\n            return (\r\n                config1.type === config2.type &&\r\n                config1.special !== BlockSpecialType.SPECIAL_BOOM &&\r\n                config2.special !== BlockSpecialType.SPECIAL_BOOM\r\n            );\r\n        };\r\n\r\n        const hasContiguous = (location1: Location): boolean => {\r\n            return contiguousLocations.some((location2) =>\r\n                isLocationEqual(location1, location2)\r\n            );\r\n        };\r\n\r\n        const hasExclude = (location1: Location): boolean => {\r\n            return excludeLocations.some((excludeLocation) =>\r\n                isLocationEqual(location1, excludeLocation)\r\n            );\r\n        };\r\n\r\n        const inQueue = (location1: Location): boolean => {\r\n            return queue.some((location2) =>\r\n                isLocationEqual(location1, location2)\r\n            );\r\n        };\r\n\r\n        // 获取相邻的连续方块\r\n        while (queue.length > 0) {\r\n            const currentLocation = queue.shift();\r\n            contiguousLocations.push(currentLocation);\r\n            const neighborsLocations =\r\n                this._grid.getNeighborsLocations(currentLocation);\r\n            for (const neighborLocation of neighborsLocations) {\r\n                if (\r\n                    typeIsSame(currentLocation, neighborLocation) &&\r\n                    !hasContiguous(neighborLocation) &&\r\n                    !hasExclude(neighborLocation) &&\r\n                    !inQueue(neighborLocation)\r\n                ) {\r\n                    // 如果相邻方块类型相同，且未被访问过，且未在队列中，则加入队列\r\n                    queue.push(neighborLocation);\r\n                }\r\n            }\r\n        }\r\n        const rowList = contiguousLocations.map((location) => location.row);\r\n        const columnList = contiguousLocations.map(\r\n            (location) => location.column\r\n        );\r\n        const rowSet = new Set(rowList);\r\n        const columnSet = new Set(columnList);\r\n        // 有效的连续方块\r\n        const validContiguousLocations: Array<Location> = [];\r\n        // 按行分类,同一行内不满三个的方块，需要排除\r\n        rowSet.forEach((row) => {\r\n            const rowLocations = contiguousLocations.filter(\r\n                (location) => location.row === row\r\n            );\r\n            if (rowLocations.length >= 3) {\r\n                validContiguousLocations.push(...rowLocations);\r\n            }\r\n        });\r\n        // 按列分类,同一列内不满三个的方块，需要排除\r\n        columnSet.forEach((column) => {\r\n            const columnLocations = contiguousLocations.filter(\r\n                (location) => location.column === column\r\n            );\r\n            if (columnLocations.length >= 3) {\r\n                validContiguousLocations.push(...columnLocations);\r\n            }\r\n        });\r\n\r\n        // 去重\r\n        return [...new Set(validContiguousLocations)];\r\n    }\r\n\r\n    public eliminateBlocks(gameCheckInfo: GameCheckInfo, cd: () => void): void {\r\n        const { swapBlocks } = gameCheckInfo;\r\n        // 交换方块, 并消除方块\r\n        if (swapBlocks) {\r\n            const [location1, location2] = swapBlocks;\r\n            const block1 = this.getBlockByLocation(location1);\r\n            const block2 = this.getBlockByLocation(location2);\r\n            this.swapBlocks(block1, block2, location1, location2, () => {\r\n                // 消除方块\r\n                this.eliminateHandler(gameCheckInfo, cd);\r\n            });\r\n        } else {\r\n            // 没有交换方块，直接消除方块\r\n            this.eliminateHandler(gameCheckInfo, cd);\r\n        }\r\n    }\r\n\r\n    protected eliminateHandler(\r\n        gameCheckInfo: GameCheckInfo,\r\n        cd: () => void\r\n    ): void {\r\n        // 消除方块\r\n        const { canEliminateCheckInfos } = gameCheckInfo;\r\n        for (const eliminateCheckInfo of canEliminateCheckInfos) {\r\n            const { contiguousLocations } = eliminateCheckInfo;\r\n            for (const location of contiguousLocations) {\r\n                const block = this.getBlockByLocation(location);\r\n                this.putBlock(block, location);\r\n            }\r\n        }\r\n        // 释放特效\r\n        this._effectMgr.effectHandler(this._grid, gameCheckInfo, cd);\r\n        // cd && cd();\r\n    }\r\n\r\n    public putBlock(block: BaseBlock, location: Location): void {\r\n        // 网格数据清除\r\n        this._grid.setCell(location, null);\r\n        // 将方块放回方块池\r\n        this._blockMgr.putBlock(block);\r\n    }\r\n\r\n    public swapBlocks(\r\n        block1: BaseBlock,\r\n        block2: BaseBlock,\r\n        location1: Location,\r\n        location2: Location,\r\n        cd: () => void\r\n    ): void {\r\n        // 交换\r\n        this._grid.setCell(location1, block2);\r\n        this._grid.setCell(location2, block1);\r\n\r\n        const pos1 = this._grid.getCellPosition(location1);\r\n        const pos2 = this._grid.getCellPosition(location2);\r\n\r\n        let step = 0;\r\n        const actionCd = () => {\r\n            step++;\r\n            if (step === 2) {\r\n                cd();\r\n            }\r\n        };\r\n\r\n        const nodeActionSeq1 = cc.sequence(\r\n            cc.moveTo(0.3, pos2),\r\n            cc.callFunc(actionCd)\r\n        );\r\n\r\n        const nodeActionSeq2 = cc.sequence(\r\n            cc.moveTo(0.3, pos1),\r\n            cc.callFunc(actionCd)\r\n        );\r\n        // 交换、还原动画\r\n        block1.node.runAction(nodeActionSeq1);\r\n        block2.node.runAction(nodeActionSeq2);\r\n    }\r\n\r\n    public swapAndBackBlocks(\r\n        location1: Location,\r\n        location2: Location,\r\n        cd: () => void\r\n    ): void {\r\n        // 获取方块\r\n        const block1 = this.getBlockByLocation(location1);\r\n        const block2 = this.getBlockByLocation(location2);\r\n        // 只交换位置，不交换方块\r\n        const pos1 = this._grid.getCellPosition(location1);\r\n        const pos2 = this._grid.getCellPosition(location2);\r\n\r\n        let step = 0;\r\n        const actionCd = () => {\r\n            step++;\r\n            if (step === 2) {\r\n                cd();\r\n            }\r\n        };\r\n\r\n        // 交换、还原动画\r\n        cc.tween(block1.node)\r\n            .sequence(\r\n                cc.moveTo(0.3, pos2),\r\n                cc.moveTo(0.3, pos1),\r\n                cc.callFunc(actionCd)\r\n            )\r\n            .start();\r\n        cc.tween(block2.node)\r\n            .sequence(\r\n                cc.moveTo(0.3, pos1),\r\n                cc.moveTo(0.3, pos2),\r\n                cc.callFunc(actionCd)\r\n            )\r\n            .start();\r\n    }\r\n\r\n    public dropRandomBlocks(cd: (entryList: Array<Location>) => void): void {\r\n        // 根据含有空位的列生成随机方块\r\n        const emptyList: Record<string, Array<Location>> = {};\r\n        const data = this._grid.getData();\r\n        for (let row = 0; row < data.length; row++) {\r\n            const rowData = data[row];\r\n            for (let column = 0; column < rowData.length; column++) {\r\n                const cell = rowData[column];\r\n                if (cell === null) {\r\n                    if (!emptyList[column]) {\r\n                        emptyList[column] = [];\r\n                    }\r\n                    emptyList[column].push({ row, column });\r\n                }\r\n            }\r\n        }\r\n        const entryList: Array<Location> = [];\r\n        // 先将悬空的方块向下掉落，再补位\r\n        const blockDropInfos: Array<BlockDropInfo> = [];\r\n        for (const columnKey in emptyList) {\r\n            const column = Number(columnKey);\r\n            const columnList = emptyList[column];\r\n            // 空位的最高行\r\n            // const maxRow = columnList[columnList.length - 1].row;\r\n            let startDropRow = columnList[0].row;\r\n            // 先掉落存在的方块\r\n            for (let row = startDropRow + 1; row < data.length; row++) {\r\n                const cell = data[row][column];\r\n                if (!cell) {\r\n                    continue;\r\n                }\r\n                const targetLocation = {\r\n                    row: startDropRow++,\r\n                    column: column,\r\n                };\r\n                // 添加到入口列表\r\n                entryList.push(targetLocation);\r\n                // 有方块，则将方块掉落到目标位置\r\n                blockDropInfos.push({\r\n                    location: { row, column },\r\n                    block: cell,\r\n                    dropTime: 0.3,\r\n                    targetDropLocation: targetLocation,\r\n                });\r\n                // 清除原位置\r\n                this._grid.setCell({ row, column }, null);\r\n                // 放置新位置\r\n                this._grid.setCell(targetLocation, cell);\r\n            }\r\n            let startGenerateRow = data.length;\r\n            // 再生成空位需要的方块\r\n            for (\r\n                let row = startGenerateRow;\r\n                row < startGenerateRow + columnList.length;\r\n                row++\r\n            ) {\r\n                const targetLocation = {\r\n                    row: startDropRow++,\r\n                    column: column,\r\n                };\r\n                // 添加到入口列表\r\n                entryList.push(targetLocation);\r\n                // 生成随机方块\r\n                const randomBlockConfig = getRandomBlockConfig();\r\n                const block = this.generateBlock(\r\n                    targetLocation,\r\n                    randomBlockConfig,\r\n                    this._grid.getCellPosition({\r\n                        row,\r\n                        column,\r\n                    })\r\n                );\r\n                // 记录\r\n                blockDropInfos.push({\r\n                    location: targetLocation,\r\n                    block,\r\n                    dropTime: 0.3,\r\n                    targetDropLocation: targetLocation,\r\n                });\r\n            }\r\n        }\r\n        // 方块掉落动画\r\n        let step = 0;\r\n        const actionCd = () => {\r\n            step++;\r\n            if (step === blockDropInfos.length) {\r\n                cd(entryList);\r\n            }\r\n        };\r\n        for (const blockDropInfo of blockDropInfos) {\r\n            const { block, dropTime, targetDropLocation } = blockDropInfo;\r\n            const targetPos = this._grid.getCellPosition(targetDropLocation);\r\n            cc.tween(block.node)\r\n                .sequence(cc.moveTo(dropTime, targetPos), cc.callFunc(actionCd))\r\n                .start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生成新特殊方块\r\n     * @param gameCheckInfo 游戏检查信息\r\n     */\r\n    public generateNewSpecialBlocks(gameCheckInfo: GameCheckInfo): void {\r\n        const { newSpecailBlocks } = gameCheckInfo;\r\n        const keys = Object.keys(newSpecailBlocks);\r\n        for (const key of keys) {\r\n            const location = parseLocation(key);\r\n            const isEmpty = this._grid.getCell(location) === null;\r\n            if (isEmpty) {\r\n                const blockConfig = newSpecailBlocks[key];\r\n                this.generateBlock(location, blockConfig);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生成方块\r\n     * @param location 位置\r\n     * @param blockConfig 方块配置\r\n     * @returns 方块\r\n     */\r\n    public generateBlock(\r\n        location: Location,\r\n        blockConfig: BlockConfig,\r\n        initPos?: cc.Vec2\r\n    ): BaseBlock {\r\n        const blockParent = this.getBlockParent(blockConfig.type);\r\n        const block = this._blockMgr.getBlock(blockConfig, blockParent);\r\n        this._grid.setCell(location, block);\r\n        block.node.setPosition(initPos || this._grid.getCellPosition(location));\r\n        return block;\r\n    }\r\n\r\n    // 获取方块地图信息\r\n    public getBlockMapInfo(): Array<Array<BlockConfig>> {\r\n        return this._grid\r\n            .getData()\r\n            .map((row) => row.map((block) => block && block.getConfig()));\r\n    }\r\n\r\n    public isInBounds(location: Location): boolean {\r\n        return this._grid.isInBounds(location);\r\n    }\r\n\r\n    public getLevelConfig(): LevelConfig {\r\n        return this._levelConfig;\r\n    }\r\n\r\n    public getAllBlock(): Array<BaseBlock> {\r\n        const blockList = this.gridRootNode.getComponentsInChildren(BaseBlock);\r\n        return blockList;\r\n    }\r\n}\r\n"]}