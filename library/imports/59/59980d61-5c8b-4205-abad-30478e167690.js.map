{"version":3,"sources":["assets\\Script\\gamePlay\\common\\EliminateUtils.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import {\n    EliminateBlockInfo,\n    EliminateType,\n    Location,\n    BlockConfig,\n    BlockSpecialType,\n    EliminateCheckInfo,\n    GameCheckInfo,\n} from '../GameTypes';\nimport { isLocationEqual } from './GameUtils';\nimport { stringifyLocation } from './Grid';\n\n/**\n * 获取消除类型\n * @param entry 检查方块入口\n * @param eliminateBlockInfos 消除方块信息\n * @returns 消除类型\n */\nexport function getEliminateType(\n    entry: Location,\n    eliminateBlockInfos: Array<EliminateBlockInfo>\n): EliminateType {\n    const rowCount = eliminateBlockInfos.reduce((acc, info) => {\n        return acc + (info.location.row === entry.row ? 1 : 0);\n    }, 0);\n    const columnCount = eliminateBlockInfos.reduce((acc, info) => {\n        return acc + (info.location.column === entry.column ? 1 : 0);\n    }, 0);\n\n    // 彩色炸弹\n    if (rowCount >= 5) {\n        // Base_5\n        return EliminateType.BASE_5;\n    } else if (columnCount >= 5) {\n        // Base_5\n        return EliminateType.BASE_5;\n    }\n\n    // 基础4连消\n    if (rowCount === 4) {\n        if (columnCount >= 3) {\n            // IRREGULAR_5\n            return EliminateType.IRREGULAR_5;\n        } else {\n            // Base_4\n            return EliminateType.BASE_4_ROW;\n        }\n    } else if (columnCount === 4) {\n        if (rowCount >= 3) {\n            // IRREGULAR_5\n            return EliminateType.IRREGULAR_5;\n        } else {\n            // Base_4\n            return EliminateType.BASE_4_COLUMN;\n        }\n    }\n\n    // 基础3连消\n    if (rowCount === 3) {\n        if (columnCount >= 3) {\n            // IRREGULAR_5\n            return EliminateType.IRREGULAR_5;\n        } else {\n            // Base_3\n            return EliminateType.BASE_3;\n        }\n    } else if (columnCount === 3) {\n        if (rowCount >= 3) {\n            // IRREGULAR_5\n            return EliminateType.IRREGULAR_5;\n        } else {\n            // Base_3\n            return EliminateType.BASE_3;\n        }\n    }\n}\n\n/**\n * 生成特殊方块\n * @param blockConfig 方块配置\n * @param eliminateType 消除类型\n * @returns 特殊方块配置\n */\nexport function generateSpecialBlock(\n    blockConfig: BlockConfig,\n    eliminateType: EliminateType\n): BlockConfig {\n    // 基础3连消不生成特殊方块\n    if (eliminateType === EliminateType.BASE_3) return null;\n\n    const baseBlockConfig = {\n        type: blockConfig.type,\n        special: BlockSpecialType.NONE,\n    };\n    switch (eliminateType) {\n        case EliminateType.BASE_4_ROW:\n            baseBlockConfig.special = BlockSpecialType.ROW;\n            break;\n        case EliminateType.BASE_4_COLUMN:\n            baseBlockConfig.special = BlockSpecialType.COLUMN;\n            break;\n        case EliminateType.BASE_5:\n            baseBlockConfig.special = BlockSpecialType.SPECIAL_BOOM;\n            break;\n        case EliminateType.IRREGULAR_5:\n            baseBlockConfig.special = BlockSpecialType.BOOM;\n            break;\n        default:\n            return null;\n    }\n    return baseBlockConfig;\n}\n\n/**\n * 特殊方块生成器,生成特殊方块信息,并保存到游戏检查信息中\n * @param eliminateCheckInfo 消除检查信息\n * @param gameCheckInfo 游戏检查信息\n */\nexport function specialBlockGenerator(\n    eliminateCheckInfo: EliminateCheckInfo,\n    gameCheckInfo: GameCheckInfo\n): void {\n    // 如果是特殊消除类型,则不生成特殊方块\n    if (eliminateCheckInfo.eliminateBlockType !== BlockSpecialType.NONE) return;\n    const eliminateBlockInfos: Array<EliminateBlockInfo> =\n        eliminateCheckInfo.contiguousLocations.reduce((acc, location) => {\n            const blockConfig =\n                gameCheckInfo.gameMapInfo[location.row][location.column];\n            return acc.concat({\n                location,\n                blockConfig,\n            });\n        }, [] as Array<EliminateBlockInfo>);\n\n    //入口方块位置\n    const entryLocation = eliminateCheckInfo.entryLocation;\n    // 获取消除类型\n    const eliminateType = getEliminateType(entryLocation, eliminateBlockInfos);\n    // 生成特殊方块\n    if (eliminateType === EliminateType.BASE_3) return;\n    const blockConfig =\n        gameCheckInfo.gameMapInfo[entryLocation.row][entryLocation.column];\n    // 生成特殊方块\n    const newSpecailBlock = generateSpecialBlock(blockConfig, eliminateType);\n    if (newSpecailBlock) {\n        // 保存特殊方块信息\n        const location = stringifyLocation(\n            entryLocation.row,\n            entryLocation.column\n        );\n        gameCheckInfo.newSpecailBlocks[location] = newSpecailBlock;\n    }\n}\n\n/**\n * 释放特殊方块，根据消除的类型，释放其他方块\n * @param specialBlockConfig 特殊方块配置\n * @param gameCheckInfo 游戏检查信息\n */\nexport function releaseSpecialBlock(\n    eliminateCheckInfo: EliminateCheckInfo,\n    alreadyEliminateBlocks: Array<Location>,\n    gameCheckInfo: GameCheckInfo\n): void {\n    // 获取消除方块信息\n    const eliminateBlockInfos: Array<EliminateBlockInfo> =\n        eliminateCheckInfo.contiguousLocations.reduce((acc, location) => {\n            const blockConfig =\n                gameCheckInfo.gameMapInfo[location.row][location.column];\n            return acc.concat({\n                location,\n                blockConfig,\n            });\n        }, [] as Array<EliminateBlockInfo>);\n\n    // 释放特性\n    const specialBlockConfig = eliminateBlockInfos.filter(\n        (info) => info.blockConfig.special !== BlockSpecialType.NONE\n    );\n    const entryLocation = eliminateCheckInfo.entryLocation;\n    // 遍历特殊方块\n    while (specialBlockConfig.length > 0) {\n        let extraEliminateLocations: Array<Location> = [];\n\n        const specialBlockInfo = specialBlockConfig.shift();\n        if (specialBlockInfo.blockConfig.special === BlockSpecialType.ROW) {\n            // 行消除\n            const targetRow = specialBlockInfo.location.row;\n            const colCount = gameCheckInfo.gameMapInfo[targetRow].length;\n            // 受影响的方块位置\n            const effectedLocations: Location[] = new Array(colCount)\n                .fill(null)\n                .map((_, index) => ({\n                    row: targetRow,\n                    column: index,\n                }));\n            // 需要额外消除的方块位置\n            extraEliminateLocations = effectedLocations.filter(\n                (location) =>\n                    !alreadyEliminateBlocks.some((l) =>\n                        isLocationEqual(l, location)\n                    )\n            );\n        } else if (\n            specialBlockInfo.blockConfig.special === BlockSpecialType.COLUMN\n        ) {\n            // 列消除\n            const targetColumn = specialBlockInfo.location.column;\n            const rowCount = gameCheckInfo.gameMapInfo.length;\n            // 受影响的方块位置\n            const effectedLocations: Location[] = new Array(rowCount)\n                .fill(null)\n                .map((_, index) => ({\n                    row: index,\n                    column: targetColumn,\n                }));\n            // 需要额外消除的方块位置\n            extraEliminateLocations = effectedLocations.filter(\n                (location) =>\n                    !alreadyEliminateBlocks.some((l) =>\n                        isLocationEqual(l, location)\n                    )\n            );\n        } else if (\n            specialBlockInfo.blockConfig.special === BlockSpecialType.BOOM\n        ) {\n            // 3 * 3 消除\n            const centerLocation = specialBlockInfo.location;\n            const effectLocations: Location[] = [];\n\n            const isInRange = (row: number, column: number) => {\n                return (\n                    row >= 0 &&\n                    row < gameCheckInfo.gameMapInfo.length &&\n                    column >= 0 &&\n                    column < gameCheckInfo.gameMapInfo[0].length\n                );\n            };\n\n            // 3 * 3 消除，遍历3 * 3 范围内的方块\n            const rowOffsetList = [-1, 0, 1];\n            const columnOffsetList = [-1, 0, 1];\n            for (const row of rowOffsetList) {\n                for (const column of columnOffsetList) {\n                    const targetRow = centerLocation.row + row;\n                    const targetColumn = centerLocation.column + column;\n                    if (isInRange(targetRow, targetColumn)) {\n                        effectLocations.push({\n                            row: targetRow,\n                            column: targetColumn,\n                        });\n                    }\n                }\n            }\n            // 四个角落的方块\n            const offsetList = [\n                cc.v2(2, 0),\n                cc.v2(0, 2),\n                cc.v2(-2, 0),\n                cc.v2(0, -2),\n            ];\n            for (const offset of offsetList) {\n                const targetRow = centerLocation.row + offset.x;\n                const targetColumn = centerLocation.column + offset.y;\n                if (isInRange(targetRow, targetColumn)) {\n                    effectLocations.push({\n                        row: targetRow,\n                        column: targetColumn,\n                    });\n                }\n                // 需要额外消除的方块位置\n                extraEliminateLocations = effectLocations.filter(\n                    (location) =>\n                        !alreadyEliminateBlocks.some((l) =>\n                            isLocationEqual(l, location)\n                        )\n                );\n            }\n        } else if (\n            specialBlockInfo.blockConfig.special ===\n            BlockSpecialType.SPECIAL_BOOM\n        ) {\n            // 同类消除\n            const entryBlockConfig =\n                gameCheckInfo.gameMapInfo[entryLocation.row][\n                    entryLocation.column\n                ];\n            const targetType = entryBlockConfig.type;\n            // 受影响的方块位置\n            const effectLocations: Location[] = [];\n            // 遍历游戏地图信息\n            for (let row = 0; row < gameCheckInfo.gameMapInfo.length; row++) {\n                const rowBlocks = gameCheckInfo.gameMapInfo[row];\n                for (let col = 0; col < rowBlocks.length; col++) {\n                    const block = rowBlocks[col];\n                    if (\n                        block.type === targetType &&\n                        block.special !== BlockSpecialType.SPECIAL_BOOM\n                    ) {\n                        effectLocations.push({\n                            row,\n                            column: col,\n                        });\n                    }\n                }\n            }\n\n            // 需要额外消除的方块位置\n            extraEliminateLocations = effectLocations.filter(\n                (location) =>\n                    !alreadyEliminateBlocks.some((l) =>\n                        isLocationEqual(l, location)\n                    )\n            );\n        }\n\n        // 获取需要额外消除的方块\n        const extraEliminateBlockInfos: Array<EliminateBlockInfo> =\n            extraEliminateLocations.reduce((acc, location) => {\n                const blockConfig =\n                    gameCheckInfo.gameMapInfo[location.row][location.column];\n                const blockInfo: EliminateBlockInfo = {\n                    location,\n                    blockConfig,\n                };\n                if (blockConfig.special !== BlockSpecialType.NONE) {\n                    // 是否是特殊方块,是则加入特殊方块数组,进一步处理\n                    specialBlockConfig.push(blockInfo);\n                }\n                return acc.concat(blockInfo);\n            }, [] as Array<EliminateBlockInfo>);\n        // 加入可消除方块检查信息\n        gameCheckInfo.canEliminateCheckInfos.push({\n            entryLocation: specialBlockInfo.location,\n            eliminateBlockType: specialBlockInfo.blockConfig.special,\n            contiguousLocations: extraEliminateBlockInfos.map(\n                (info) => info.location\n            ),\n        });\n\n        // 将需要额外消除的方块加入已消除方块集合\n        alreadyEliminateBlocks.push(...extraEliminateLocations);\n    }\n}\n"]}