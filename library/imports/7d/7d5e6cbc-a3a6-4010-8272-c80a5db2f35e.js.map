{"version":3,"sources":["assets\\Script\\gamePlay\\common\\SpineUtils.ts"],"names":[],"mappings":";;;;;;;AAAa,QAAA,qBAAqB,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;AAI9D,SAAS,WAAW,CAAC,GAAiB,EAAE,QAAgB,EAAE,OAAY;IAClE,IAAI,CAAC,SAAS,EAAE;QACZ,OAAO;KACV;IAEA,EAAE,CAAC,KAAa,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE;QAClC,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAG,EAAE,CAAC,IAAY,CAAC,OAAO,CAAC,OAAO,CAAC;KAC9C,CAAC,CAAC;AACP,CAAC;AAED,SAAS,aAAa,CAAC,SAAqB,EAAE,IAAa;IACvD,IAAI,CAAC,SAAS,EAAE;QACZ,OAAO;KACV;IAED,KAA+C,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS,EAAE;QAA/C,IAAA,oBAAgC,EAA9B,SAAS,eAAA,EAAE,QAAQ,cAAA,EAAE,OAAO,aAAA;QACrC,WAAW,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;KAC7C;IAEA,MAAc,CAAC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7E,CAAC;AAGD,SAAgB,mBAAmB,CAC/B,SAAsB,EACtB,OAAqB,EACrB,QAAgB;IAEhB,IAAI,CAAC,SAAS,EAAE;QACZ,OAAO;KACV;IAED,IAAI,QAAQ,GAAG,6BAAqB,CAAC;IAC7B,IAAA,YAAY,GAAK,CAAC,SAAS,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAQ,aAA9C,CAA+C;IACnE,IAAI,YAAY,EAAE;QACd,QAAQ,GAAG,YAAY,CAAC,YAAY,EAAE,CAAC;KAC1C;IAED,aAAa,CACT,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,UAAA,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,EACrD,OAAO,CAAC,IAAI,CACf,CAAC;AACN,CAAC;AAnBD,kDAmBC","file":"","sourceRoot":"/","sourcesContent":["export const DefaultAnimationsEnum = cc.Enum({ '<None>': 0 });\n\ntype EnumAttr = { component: cc.Component; propName: string; enumDef: any };\n\nfunction setEnumAttr(obj: cc.Component, propName: string, enumDef: any): void {\n    if (!CC_EDITOR) {\n        return;\n    }\n\n    (cc.Class as any).attr(obj, propName, {\n        type: 'Enum',\n        enumList: (cc.Enum as any).getList(enumDef)\n    });\n}\n\nfunction refreshEditor(enumArray: EnumAttr[], node: cc.Node): void {\n    if (!CC_EDITOR) {\n        return;\n    }\n\n    for (const { component, propName, enumDef } of enumArray) {\n        setEnumAttr(component, propName, enumDef);\n    }\n\n    (global as any).Editor.Utils.refreshSelectedInspector('node', node.uuid);\n}\n\n\nexport function updateAnimationEnum(\n    spineComp: sp.Skeleton,\n    context: cc.Component,\n    propName: string\n): void {\n    if (!CC_EDITOR) {\n        return;\n    }\n\n    let animEnum = DefaultAnimationsEnum;\n    const { skeletonData } = (spineComp || Object.create(null)) as any;\n    if (skeletonData) {\n        animEnum = skeletonData.getAnimsEnum();\n    }\n\n    refreshEditor(\n        [{ component: context, propName, enumDef: animEnum }],\n        context.node\n    );\n}"]}