{"version":3,"sources":["assets\\Script\\gamePlay\\common\\GameUtils.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { Direction, DirectionVector } from '../GameConst';\r\nimport {\r\n    BlockConfig,\r\n    BlockSpecialType,\r\n    BlockType,\r\n    Location,\r\n} from '../GameTypes';\r\n\r\nconst DirectionList = [\r\n    Direction.UP,\r\n    Direction.DOWN,\r\n    Direction.LEFT,\r\n    Direction.RIGHT,\r\n];\r\n\r\nexport function isLocationEqual(\r\n    location1: Location,\r\n    location2: Location\r\n): boolean {\r\n    return (\r\n        location1.row === location2.row && location1.column === location2.column\r\n    );\r\n}\r\n\r\nexport function getDirection(delta: cc.Vec2): Direction {\r\n    let minAngle = Infinity;\r\n    let minDirection = Direction.NONE;\r\n    for (const direction of DirectionList) {\r\n        const dirVec = DirectionVector[direction];\r\n        const angle = delta.normalize().angle(dirVec);\r\n        if (angle < minAngle) {\r\n            minAngle = angle;\r\n            minDirection = direction;\r\n        }\r\n    }\r\n    return minDirection;\r\n}\r\n\r\nexport function getNeighborLocations(location: Location): Array<Location> {\r\n    return [\r\n        { row: location.row - 1, column: location.column },\r\n        { row: location.row + 1, column: location.column },\r\n        { row: location.row, column: location.column - 1 },\r\n        { row: location.row, column: location.column + 1 },\r\n    ];\r\n}\r\n\r\nexport function isNeighborLocation(\r\n    location1: Location,\r\n    location2: Location\r\n): boolean {\r\n    if (location1.row === location2.row) {\r\n        return Math.abs(location1.column - location2.column) === 1;\r\n    } else if (location1.column === location2.column) {\r\n        return Math.abs(location1.row - location2.row) === 1;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function getSwapLocation(\r\n    location: Location,\r\n    direction: Direction\r\n): Location {\r\n    if (direction === Direction.NONE) {\r\n        return location;\r\n    }\r\n    const directionVector = DirectionVector[direction];\r\n    return {\r\n        row: location.row + directionVector.y,\r\n        column: location.column + directionVector.x,\r\n    };\r\n}\r\n\r\nexport function getRandomBlockConfig(): BlockConfig {\r\n    const blockConfigs = [\r\n        { type: BlockType.BLOCK_TYPE_1, special: BlockSpecialType.NONE },\r\n        { type: BlockType.BLOCK_TYPE_2, special: BlockSpecialType.NONE },\r\n        { type: BlockType.BLOCK_TYPE_3, special: BlockSpecialType.NONE },\r\n        { type: BlockType.BLOCK_TYPE_4, special: BlockSpecialType.NONE },\r\n        { type: BlockType.BLOCK_TYPE_5, special: BlockSpecialType.NONE },\r\n    ];\r\n    return blockConfigs[Math.floor(Math.random() * blockConfigs.length)];\r\n}\r\n"]}