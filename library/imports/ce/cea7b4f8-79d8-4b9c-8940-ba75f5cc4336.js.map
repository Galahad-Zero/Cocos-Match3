{"version":3,"sources":["assets\\Script\\gamePlay\\common\\GameFsm.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * 游戏状态枚举\r\n * 定义游戏的所有可能状态\r\n */\r\nexport enum GameState {\r\n    /** 准备完成 */\r\n    READY = 'ready',\r\n    /** 游玩中 */\r\n    PLAYING = 'playing',\r\n    /** 检查消除 */\r\n    CHECKING = 'checking',\r\n    /** 消除,并释放特性 */\r\n    ELIMINATING = 'eliminating',\r\n    /** 随机产生并掉落 */\r\n    DROPPING = 'dropping',\r\n    /** 游戏结束 */\r\n    GAME_OVER = 'gameOver',\r\n    /** 过关 */\r\n    GAME_WIN = 'gameWin',\r\n}\r\n\r\n/**\r\n * 状态变化回调函数类型\r\n */\r\nexport type StateChangeCallback = (\r\n    fromState: GameState,\r\n    toState: GameState\r\n) => void;\r\n\r\n/**\r\n * 游戏状态机\r\n * 管理游戏的状态转换和状态相关的逻辑\r\n */\r\nexport default class GameFsm {\r\n    /** 当前状态 */\r\n    private _currentState: GameState;\r\n\r\n    /** 状态变化回调列表 */\r\n    private _stateChangeCallbacks: StateChangeCallback[] = [];\r\n\r\n    /** 状态转换规则 - 定义哪些状态可以转换到哪些状态 */\r\n    private _stateTransitions: Map<GameState, GameState[]>;\r\n\r\n    constructor(initialState: GameState = GameState.READY) {\r\n        this._currentState = initialState;\r\n        this._stateTransitions = new Map();\r\n        this._initStateTransitions();\r\n    }\r\n\r\n    /**\r\n     * 初始化状态转换规则\r\n     * 定义每个状态可以转换到哪些状态\r\n     */\r\n    private _initStateTransitions(): void {\r\n        // Ready 状态可以转换到 Playing\r\n        this._stateTransitions.set(GameState.READY, [GameState.PLAYING]);\r\n\r\n        // Playing 状态可以转换到 Checking、GameOver、GameWin\r\n        this._stateTransitions.set(GameState.PLAYING, [\r\n            GameState.CHECKING,\r\n            GameState.GAME_OVER,\r\n            GameState.GAME_WIN,\r\n        ]);\r\n\r\n        // Checking 状态可以转换到 Playing、Eliminating、GameOver、GameWin\r\n        this._stateTransitions.set(GameState.CHECKING, [\r\n            GameState.PLAYING,\r\n            GameState.ELIMINATING,\r\n            GameState.GAME_OVER,\r\n            GameState.GAME_WIN,\r\n        ]);\r\n\r\n        // Eliminating 状态可以转换到 Dropping、GameOver、GameWin\r\n        this._stateTransitions.set(GameState.ELIMINATING, [\r\n            GameState.DROPPING,\r\n            GameState.GAME_OVER,\r\n            GameState.GAME_WIN,\r\n        ]);\r\n\r\n        // Dropping 状态可以转换到 Checking、GameOver、GameWin\r\n        this._stateTransitions.set(GameState.DROPPING, [\r\n            GameState.CHECKING,\r\n            GameState.GAME_OVER,\r\n            GameState.GAME_WIN,\r\n        ]);\r\n\r\n        // GameOver 和 GameWin 是终止状态，只能转换到 Ready (重新开始)\r\n        this._stateTransitions.set(GameState.GAME_OVER, [GameState.READY]);\r\n        this._stateTransitions.set(GameState.GAME_WIN, [GameState.READY]);\r\n    }\r\n\r\n    /**\r\n     * 获取当前状态\r\n     */\r\n    public get currentState(): GameState {\r\n        return this._currentState;\r\n    }\r\n\r\n    /**\r\n     * 检查是否可以从当前状态转换到目标状态\r\n     * @param toState 目标状态\r\n     * @returns 是否可以转换\r\n     */\r\n    public canTransitionTo(toState: GameState): boolean {\r\n        const allowedStates = this._stateTransitions.get(this._currentState);\r\n        return allowedStates ? allowedStates.includes(toState) : false;\r\n    }\r\n\r\n    /**\r\n     * 转换到新状态\r\n     * @param newState 新状态\r\n     * @param force 是否强制转换（忽略转换规则）\r\n     * @returns 是否转换成功\r\n     */\r\n    public changeState(newState: GameState, force: boolean = false): boolean {\r\n        // 如果状态相同，不执行转换\r\n        if (this._currentState === newState) {\r\n            console.warn(`[GameFsm] 已经处于状态: ${newState}`);\r\n            return false;\r\n        }\r\n\r\n        // 检查是否允许转换\r\n        if (!force && !this.canTransitionTo(newState)) {\r\n            console.warn(\r\n                `[GameFsm] 无法从状态 ${this._currentState} 转换到 ${newState}`\r\n            );\r\n            return false;\r\n        }\r\n\r\n        const oldState = this._currentState;\r\n        this._currentState = newState;\r\n\r\n        console.log(`[GameFsm] 状态转换: ${oldState} -> ${newState}`);\r\n\r\n        // 触发状态变化回调\r\n        this._notifyStateChange(oldState, newState);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 注册状态变化回调\r\n     * @param callback 回调函数\r\n     */\r\n    public onStateChange(callback: StateChangeCallback): void {\r\n        if (!this._stateChangeCallbacks.includes(callback)) {\r\n            this._stateChangeCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 移除状态变化回调\r\n     * @param callback 回调函数\r\n     */\r\n    public offStateChange(callback: StateChangeCallback): void {\r\n        const index = this._stateChangeCallbacks.indexOf(callback);\r\n        if (index !== -1) {\r\n            this._stateChangeCallbacks.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通知所有监听者状态已改变\r\n     * @param fromState 原状态\r\n     * @param toState 新状态\r\n     */\r\n    private _notifyStateChange(fromState: GameState, toState: GameState): void {\r\n        this._stateChangeCallbacks.forEach((callback) => {\r\n            try {\r\n                callback(fromState, toState);\r\n            } catch (error) {\r\n                console.error('[GameFsm] 状态变化回调执行错误:', error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 检查是否处于某个状态\r\n     * @param state 要检查的状态\r\n     */\r\n    public isState(state: GameState): boolean {\r\n        return this._currentState === state;\r\n    }\r\n\r\n    /**\r\n     * 检查是否处于游戏进行中的状态（非结束状态）\r\n     */\r\n    public isGameActive(): boolean {\r\n        return (\r\n            this._currentState !== GameState.GAME_OVER &&\r\n            this._currentState !== GameState.GAME_WIN &&\r\n            this._currentState !== GameState.READY\r\n        );\r\n    }\r\n\r\n    /**\r\n     * 检查是否可以进行玩家操作\r\n     */\r\n    public canPlayerOperate(): boolean {\r\n        return this._currentState === GameState.PLAYING;\r\n    }\r\n\r\n    /**\r\n     * 重置状态机到初始状态\r\n     */\r\n    public reset(): void {\r\n        const oldState = this._currentState;\r\n        this._currentState = GameState.READY;\r\n        console.log(`[GameFsm] 状态机重置到: ${GameState.READY}`);\r\n        this._notifyStateChange(oldState, GameState.READY);\r\n    }\r\n\r\n    /**\r\n     * 清理状态机，移除所有回调\r\n     */\r\n    public destroy(): void {\r\n        this._stateChangeCallbacks = [];\r\n        console.log('[GameFsm] 状态机已销毁');\r\n    }\r\n}\r\n"]}