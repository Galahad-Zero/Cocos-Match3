{"version":3,"sources":["assets\\Script\\gamePlay\\common\\Grid.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { getNeighborLocations } from './GameUtils';\r\nimport { Location } from '../GameTypes';\r\n\r\nexport function stringifyLocation(row: number, column: number): string {\r\n    return `${row},${column}`;\r\n}\r\n\r\nexport function parseLocation(location: string): {\r\n    row: number;\r\n    column: number;\r\n} {\r\n    const [row, column] = location.split(',').map(Number);\r\n    return { row, column };\r\n}\r\n\r\nexport default class Grid<T> {\r\n    private width: number;\r\n    private height: number;\r\n    private cellSize: cc.Size;\r\n    private cellSpacing: number;\r\n    private data: Array<Array<T>>;\r\n\r\n    constructor(\r\n        width: number,\r\n        height: number,\r\n        cellSize: cc.Size,\r\n        cellSpacing: number\r\n    ) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.cellSize = cellSize;\r\n        this.cellSpacing = cellSpacing;\r\n        this.data = new Array<Array<T>>(height)\r\n            .fill(null)\r\n            .map(() => new Array<T>(width).fill(null));\r\n    }\r\n\r\n    public getWidth(): number {\r\n        return this.width;\r\n    }\r\n\r\n    public getHeight(): number {\r\n        return this.height;\r\n    }\r\n\r\n    public getData(): T[][] {\r\n        return this.data;\r\n    }\r\n\r\n    public setData(data: T[][]): void {\r\n        this.data = data;\r\n    }\r\n\r\n    public getCell({ row, column }: Location): T {\r\n        return this.data[row][column];\r\n    }\r\n\r\n    public setCell({ row, column }: Location, data: T): void {\r\n        this.data[row][column] = data;\r\n    }\r\n\r\n    public getCellPosition({ row, column }: Location): cc.Vec2 {\r\n        const x =\r\n            column * (this.cellSize.width + this.cellSpacing) +\r\n            this.cellSize.width / 2;\r\n        const y =\r\n            row * (this.cellSize.height + this.cellSpacing) +\r\n            this.cellSize.height / 2;\r\n        return new cc.Vec2(x, y);\r\n    }\r\n\r\n    public getTouchedLocation(position: cc.Vec2): {\r\n        row: number;\r\n        column: number;\r\n    } {\r\n        const row = Math.floor(\r\n            position.y / (this.cellSize.height + this.cellSpacing)\r\n        );\r\n        const column = Math.floor(\r\n            position.x / (this.cellSize.width + this.cellSpacing)\r\n        );\r\n        return this.isInBounds({ row, column }) ? { row, column } : null;\r\n    }\r\n\r\n    public isInBounds({ row, column }: Location): boolean {\r\n        return (\r\n            column >= 0 && column < this.width && row >= 0 && row < this.height\r\n        );\r\n    }\r\n\r\n    public getNeighbors({ row, column }: Location): Array<T> {\r\n        const neighborLocations = getNeighborLocations({ row, column });\r\n        return neighborLocations.reduce((neighbors, neighborLocation) => {\r\n            if (this.isInBounds(neighborLocation)) {\r\n                neighbors.push(this.getCell(neighborLocation));\r\n            }\r\n            return neighbors;\r\n        }, new Array<T>());\r\n    }\r\n\r\n    public getNeighborsLocations({ row, column }: Location): Array<Location> {\r\n        const neighborLocations = getNeighborLocations({ row, column });\r\n        return neighborLocations.filter((neighborLocation) =>\r\n            this.isInBounds(neighborLocation)\r\n        );\r\n    }\r\n\r\n    public getGridSize(): cc.Size {\r\n        const { width, height } = this.cellSize;\r\n        const totalWidth =\r\n            width * this.width + this.cellSpacing * (this.width - 1);\r\n        const totalHeight =\r\n            height * this.height + this.cellSpacing * (this.height - 1);\r\n        return new cc.Size(totalWidth, totalHeight);\r\n    }\r\n\r\n    public clear(): void {\r\n        this.data = new Array<Array<T>>(this.height)\r\n            .fill(null)\r\n            .map(() => new Array<T>(this.width).fill(null));\r\n    }\r\n}\r\n"]}